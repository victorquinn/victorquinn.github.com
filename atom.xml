<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Victor Quinn]]></title>
  <link href="http://victorquinn.com/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2013-01-09T15:27:32-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Inheritance - Ensure method in parent returns instance of child]]></title>
    <link href="http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child/"/>
    <updated>2013-01-09T11:55:00-05:00</updated>
    <id>http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child</id>
    <content type="html"><![CDATA[<p>I recently came up against a pretty interesting problem in PHP. Explaining the
problem will take up the majority of this post, the solution the minority.</p>

<p>If the title gives you enough info to know this is likely the solution to your
problem, <a href="#inheritance-solutions">click here to jump to the solutions.</a></p>

<h2>The Problem</h2>

<p>On a recent application I was building in PHP, I had a parent class with
children that inherited from it and overrode some methods of the parent.</p>

<p>I was building a queryable object, the idea of which was that I could chain
together query methods which could each pass through and filter the returned
dataset.</p>

<p>Problem being, in the parent I was returning instances of the parent class, so
if I chained 2 of these together, a method called on the second call would call
the parent&#8217;s method, not the child&#8217;s method (if it had overwritten the parent
method).</p>

<p>To make this a bit more concrete, I have concocted an example which is a
simplified version of the problem I needed to solve:</p>

<h2>Example</h2>

<h3>The parent class</h3>

<p>First, we have a filterable object class with some base methods:</p>

<figure class='code'><figcaption><span>Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Filterable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$items</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Limit how many items are returned</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   The number of items to return</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">limit</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Filterable</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Skip the first N items</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   The number of items to skip</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">skip</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Filterable</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="nv">$n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Return the $items as an array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as you can see, a pretty simple class. It takes in an array of items and then
has methods to limit() or skip() a number of items in that list and a method to
get the resultant array back.</p>

<h3>Using the Parent Class</h3>

<p>To use this is pretty simple:</p>

<figure class='code'><figcaption><span>Using the Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$items</span> <span class="o">=</span> <span class="k">array</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Instantiate a new instance of Filterable</span>
</span><span class='line'><span class="nv">$filterable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Filterable</span><span class="p">(</span><span class="nv">$items</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now do some filtering</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns an object of type Filterable with the internal array</span>
</span><span class='line'><span class="c1">// of array(1, 2, 3, 4)</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// But we can also chain them</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns an object of type Filterable with the internal array of</span>
</span><span class='line'><span class="c1">// array(2, 3, 4)</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// To get the resulting array, we can use the get() function to pull out the</span>
</span><span class='line'><span class="c1">// internal data. So the following returns the actual array</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>So this is all well and good and works like a charm. Go ahead, try it, it&#8217;ll
work as expected. So where does the problem arise?</p>

<h3>Enter a child</h3>

<p>So let&#8217;s add a child class and override one of the methods. Let&#8217;s say we want to
alter the limit() function so it limits by n*2 elements if n is passed to it. It
will inherit all of the attributes of the parent so there is no need to
redeclare any methods we are not overriding here. So __construct(), skip(), and
get() will work by using the parent&#8217;s methods.</p>

<figure class='code'><figcaption><span>Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FilterableChild</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Skip the first N*2 elements</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   Doubled, this is the number of items to skip</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">skip</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">FilterableChild</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="nv">$n</span><span class="o">*</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using this child</h3>

<p>Let&#8217;s try using the child class:</p>

<figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$items</span> <span class="o">=</span> <span class="k">array</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Instantiate a new instance of FilterableChild</span>
</span><span class='line'><span class="nv">$filterable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FilterableChild</span><span class="p">(</span><span class="nv">$items</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now do some filtering</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns an object of type Filterable (note: not FilterableChild) with the</span>
</span><span class='line'><span class="c1">// internal array (1, 2, 3, 4)</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns an object of type FilterableChild with the internal array (3, 4, 5)</span>
</span><span class='line'><span class="c1">// as it as skipped the first n*2 elements as defined in the child class</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// But we can also chain them</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns an object of type Filterable with the internal array of (2, 3, 4),</span>
</span><span class='line'><span class="c1">// not (3, 4) as would be expected.</span>
</span><span class='line'><span class="nv">$filterable</span><span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uh oh, but that&#8217;s not what we wanted. We started off with a FilterableChild
object so we&#8217;d like to call the FilterableChild object&#8217;s skip method, but we are
calling the parent&#8217;s skip method here because limit() returned an object of type
Filterable, not FilterableChild, so when skip() is called, the parent object&#8217;s
method is called rather than the child&#8217;s.</p>

<p>But how to solve this? We surely do not want to update the parent to have
knowledge of the child, that breaks some of the Object Oriented nature of the
code.</p>

<p>In an ideal world we would do some kind of object introspection so the parent
class would return an object of whatever type was passed to it, but PHP doesn&#8217;t
really have true introspection so this will not work either!</p>

<p>We could use the factory pattern, but then we&#8217;d be creating a bunch of
extraneous classes.</p>

<h2><a id="inheritance-solutions"></a> The Solutions</h2>

<p>I actually came up with 2 solutions to this problem, one before and another
while writing this article.</p>

<h3>First solution: Messy introspection</h3>

<p>We could use something like the following for each of our parent methods:</p>

<figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Filterable</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Skip the first N items</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   The number of items to skip</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">skip</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$myClass</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nv">$myClass</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="nv">$n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This uses some kind of messy PHP introspection. There is no true object
introspection in PHP, so the best we can do is use the get_class() method which
returns a string which is the name of the class and then use that class to
return an object of the type of $this.</p>

<p>This would obviously work for the parent, but the magic is that it also works
for the child as even if the child does not implement a method (thereby falling
back to the parent&#8217;s implementation) the parent will return an object of the
child&#8217;s type. In other words, since $this for a child object would be
FilterableChild, even if the parent&#8217;s skip() method is called, get_class($this);
would return &#8220;FilterableChild&#8221; so the parent, which has no knowledge of the
child is able to return an object of that child&#8217;s class.</p>

<p>This could also be refactored to its own member function and called from within
any member methods to be a bit cleaner:</p>

<figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Filterable</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Skip the first N items</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   The number of items to skip</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">skip</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">construct_instance_of</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="nv">$n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct an instance matching the original class</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">construct_instance_of</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$class</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$class</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is appealing because the child class doesn&#8217;t need to do any additional work
and it will work.</p>

<h3>Second Solution: Implement construct_instance_of() in child</h3>

<p>This solution is perhaps a bit cleaner because it doesn&#8217;t deal with the ugliness
of getting the class name as a string and deaing with it, but requires any child
objects to override the construct_instance_of() method to return an object of
its type. Below I&#8217;ve got code for the parent and child object to make this work:</p>

<figure class='code'><figcaption><span>Parent  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Filterable</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Skip the first N items</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param $n</span>
</span><span class='line'><span class="sd">     *   The number of items to skip</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">skip</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">construct_instance_of</span><span class="p">(</span><span class="nb">array_slice</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(),</span> <span class="nv">$n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct an instance matching the original class</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">construct_instance_of</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Filterable</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Child  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FilterableChild</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Construct an instance matching the original class</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">construct_instance_of</span><span class="p">(</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">FilterableChild</span><span class="p">(</span><span class="nv">$i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since an object is created with its class, if we are always using
construct_instance_of() to return the object and it&#8217;s implemented in all
children, the returned object will always have the child class even if the
method is called from the parent.</p>
]]><a href="http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving]]></title>
    <link href="http://victorquinn.com/blog/2013/01/06/moving/"/>
    <updated>2013-01-06T15:47:00-05:00</updated>
    <id>http://victorquinn.com/blog/2013/01/06/moving</id>
    <content type="html"><![CDATA[<p>Ugh. Just seeing the word makes me cringe. The weekend after Christmas, I moved
into a new place. I am at once excited about my new home and the prospect of a
new beginning while frustrated at the ridiculous time sink it has become.</p>

<p>Things were not (for reasons on which I will not elaborate) working out at our
old place, so we packed up everything we owned and now have a fresh start in a
a new townhouse.</p>

<p>I sit here, surrounded by boxes and bare walls, having already spent an
untold number of days putting every one of my worldly possessions into those
boxes just to remove them upon arrival at this new house, and knowing I&#8217;ll spend
many more taking my stuff out of those boxes before reaching the end.</p>

<p>Things are good and I am overall quite happy, but if someone told me, &#8220;you will
have to stop all work on anything productive for the next 2 months while you
do nothing but pick your stuff up here and put it away on the other side&#8221; I&#8217;d
have told them to shove something somewhere where things aren&#8217;t meant to shoved.</p>

<p>Instead of being a lot further along building <a href="http://scalesapp.com">Scales</a> I
have moved my stuff from over there to over here. &lt;sarcasm>Awesome.
&lt;/sarcasm></p>

<p>The first few days here were exciting:
- Look at all the organizing I can do!
- Everything can be put in its rightful place
- Clean all the things!
- There are so many possibilities</p>

<p>But now that the honeymoon period has worn off, I&#8217;m left with a ton of boxes and
little motivation. I&#8217;ve put away and dealt with the fun things, all that&#8217;s left
is the tedious boring stuff. I&#8217;ll slog through it and my wife will no doubt help
keep me motivated but man is it a drag.</p>

<p>I. Hate. Moving.</p>
]]><a href="http://victorquinn.com/blog/2013/01/06/moving/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9]]></title>
    <link href="http://victorquinn.com/blog/2012/12/23/cloud9/"/>
    <updated>2012-12-23T15:19:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/12/23/cloud9</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://victorquinn.com/images/cloud9.png"></p>

<p>I have been following <a href="http://c9.io">Cloud9</a> since their early
days. I was thrilled at their open source editor, <a href="http://ace.ajax.org">Ace</a>
(formerly Bespin) and actually wrote a
<a href="http://drupal.org/node/1377948">Drupal WYSIWYG plugin</a> to allow it as an option
for HTML editing in Drupal.</p>

<p>But, when I originally looked at Cloud9, as neat as it was to be able to edit
files in the cloud, it wasn&#8217;t really too useful for much.</p>

<p>Just recently a co-worker sent me a link to some code he had written using it
with some client-side javascript code. It was nothing short of magical.</p>

<p>This. Changes. Everything.</p>

<p>Wondering what it&#8217;ll be like to develop in the future? Just try out Cloud9.</p>

<h2>Direct git Integration</h2>

<p>Cloud9 can pair with your <a href="http://github.com">Github</a> or
<a href="http://bitbucket.com">Bitbucket</a> account and pull in all the code in any of your
repositories. So with just the click of a button you&#8217;re up and running with your
code. That&#8217;s pretty awesome.</p>

<p>But they actually had this awhile back when I tried it (though it now is even
more fluid and awesome). What has changed?</p>

<h2>The old problem</h2>

<p>Code editing in the cloud was neat and all, but I had to commit any changes I
made so I could check them out locally or on my webserver so I could test it and
see if it blew everything up or fixed the problem I was trying to solve.</p>

<p>This led to a tortured workflow involving committing sometimes not working code
in Cloud9, checking it out locally, running it, seeing if it worked or broke,
editing and bugfixing it locally, committing that, then going back to work in
Cloud9. As I&#8217;m sure you can imagine, Cloud9 quickly dropped out of my workflow
and I went back to just editing everything locally.</p>

<h2>The solution arrives!</h2>

<p>Imagine my surprise and wonder upon most recently checking out Cloud9 when it
had the ability to run code, in your browser! It can easily handle node.js,
rails, I&#8217;m sure more. It even handled this Jekyll-based blog with ease! In fact
I am editing this now, in Cloud9!</p>

<p>It has GUI shortcuts for things like git commands, npm install/uninstall, and
more, but it also allows you to drop directly into a terminal and run commands
there! It&#8217;s just like having your own server with none of the headache.</p>

<h2>Always in sync across systems</h2>

<p>One of my favorite benefits of this approach is that everything is, by its
nature always in sync across systems. I can pick up my laptop, do some work,
then move to my desktop, open Cloud9 and everything is just as I left it. I
could go sit down in a random computer lab or library and still be in sync and
ready to roll.</p>

<p>This last bit, in my opinion, is the most powerful feature of this kind
of Cloud programming. For $0, I can have an always in sync IDE operable from any
browser, my own cloud server, and more. It took awhile for the gravity of this
to sink in, but this is pretty amazing. The barrier to entry for programming
with a server has never been lower</p>

<h2>Conclusion</h2>

<p>There&#8217;s a lot more to discuss that I&#8217;m not touching on here, just wanted to hit
some of the quick highlights. I&#8217;m trying to work this into my workflow more so
I&#8217;m sure I&#8217;ll have more thoughts later.</p>

<p>This is seriously awesome and feels like the future&#8230;</p>
]]><a href="http://victorquinn.com/blog/2012/12/23/cloud9/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Scales]]></title>
    <link href="http://victorquinn.com/blog/2012/11/25/launching-scales/"/>
    <updated>2012-11-25T18:31:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/11/25/launching-scales</id>
    <content type="html"><![CDATA[<p>Today I officially announce the initial launch of the new website for my startup called <a href="http://scalesapp.com">Scales</a>.</p>

<p><img class="center" src="http://victorquinn.com/images/scales-icon.png" width="256" height="256"></p>

<p>Named for the implement held in one hand by <a href="http://en.wikipedia.org/wiki/Lady_Justice">Lady Justice</a>, Scales will focus on creating innovative learning solutions for law students.</p>

<p>More info is available on the <a href="http://scalesapp.com">Scales</a> site, but in brief my goal is to meld my knowledge of the law with my skills as a software architect and build something unlike anything else that currently exists. Scales will offer a fresh new take on legal supplements, bringing them into the 21st century.</p>

<p>For the tech nerds out there, Scales is a <a href="http://rubyonrails.org">Ruby on Rails</a> application which will serve as the central repository for info, study materials, quiz questions, and other learning content. I will then build out a web experience directly in Rails using <a href="http://backbonejs.org">Backbone.js</a> to ensure it&#8217;s snappy along with an iOS app which will communicate to that main web app via an API. Content and progress created in the Rails app will by seamlessly synchronized to the iOS app and vice versa with some intelligent caching so lack of connectivity will never be blocking.</p>

<p>With my rich background in software development building APIs, my plan is to be able to offer a top notch, fully integrated experience for legal education unlike any other currently out there which is also open for future expansion to Android devices or desktop applications or whatever else the future may have in store. (Direct mindlink anybody?)</p>

<p>I am flying solo on this project so progress may seem somewhat slow at the start, but will always be steady and I hope to have a true initial launch with content for a core set of courses sometime in Spring 2013. Please stay tuned for updates and if you are interested please do not hesitate to <a href="mailto:mail@victorquinn.com?subject=Scales">contact me</a>.</p>

<p>In the meantime any posts relating to Scales will be tagged appropriately and can all be viewed <a href="http://victorquinn.com/blog/categories/scales/">on this page</a>.</p>
]]><a href="http://victorquinn.com/blog/2012/11/25/launching-scales/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fresh look]]></title>
    <link href="http://victorquinn.com/blog/2012/11/01/fresh-look/"/>
    <updated>2012-11-01T00:27:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/11/01/fresh-look</id>
    <content type="html"><![CDATA[<p>Decided it was time for a fresh new look.</p>

<p>For reference, a screenshot of the old design:</p>

<p><img class="center" src="http://victorquinn.com/images/oldstyle.png"></p>

<p>I wanted to redesign to make it cleaner and simpler, to better highlight the content, and to move to something which felt a bit less constrained with some more fun colors. I had grown bored of the green everywhere. I&#8217;m quite pleased with the outcome.</p>
]]><a href="http://victorquinn.com/blog/2012/11/01/fresh-look/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Civic Drupal Module]]></title>
    <link href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"/>
    <updated>2012-10-26T16:28:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module</id>
    <content type="html"><![CDATA[<p>One of the nice things about working for a political company is the ability to work in a fast-moving field, especially close to election time.</p>

<p>Just a few weeks ago Google came out with a new API called <a href="https://developers.google.com/civic-information/">Civic</a> which allows you to pass in an address and get back a bunch of information related to voting in the upcoming election. It will return things such as polling places, candidates, and other election information.</p>

<p><img class="center" src="http://victorquinn.com/images/google.png"></p>

<p>Our company took this to task and created a Drupal module which interacts with this new API service so people can easily add a &#8220;Find my polling place&#8221; widget to their Drupal website. This should hopefully get more people informed about the election and getting out to vote.</p>

<p>For my part, I took the Drupal 6 version created by my co-workers and ported it to Drupal 7. I also added (Drupal 7 only for now) some other cool info based on your address such as information on the relevant contests and links to the candidate pages so voters can be well informed going into election day.</p>

<p>Check it out!</p>

<p><a href="http://d7demo.ngpvanhost.com">Try out a demo</a></p>

<p><a href="http://drupal.org/project/google_civic">Module page on drupal.org</a></p>
]]><a href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git commit partial]]></title>
    <link href="http://victorquinn.com/blog/2012/10/18/git-commit-partial/"/>
    <updated>2012-10-18T10:38:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/18/git-commit-partial</id>
    <content type="html"><![CDATA[<p>One of my favorite git tricks is the ability to commit only part of a file. This is a short but sweet tip.</p>

<p>Just use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add -p filename.rb
</span></code></pre></td></tr></table></div></figure>


<p>This will ask you whether or not to stage each hunk of the file so you can commit that awesome change you made at the top, not stage the middle piece which is still a work in progress, and stage the piece at the bottom your team member needs to keep making progress.</p>
]]><a href="http://victorquinn.com/blog/2012/10/18/git-commit-partial/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cd which directory]]></title>
    <link href="http://victorquinn.com/blog/2012/10/15/cd-which-directory/"/>
    <updated>2012-10-15T10:04:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/15/cd-which-directory</id>
    <content type="html"><![CDATA[<p>Sharing a minor tweak which has been very useful to me.</p>

<p>I find I often want to cd into the directory where a program exists. Let&#8217;s say I was trying to jump to the directory which contained <em>myawesomeprogram</em> but didn&#8217;t know where it was. My old workflow was something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>which myawesomeprogram
</span><span class='line'><span class="c"># Manually click/drag to copy and paste the resulting output</span>
</span><span class='line'><span class="nb">cd</span> &lt;pasted directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Come on, I&#8217;m an übernerd, surely I can figure out something better/more efficient which doesn&#8217;t require me to touch my mouse.</p>

<h2>Enter a simple zsh function</h2>

<p>I use <a href="http://zsh.sourceforge.net">zsh</a> for my shell. I think this should work with bash though YMMV.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cdw <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="k">$(</span>dirname <span class="k">$(</span>which <span class="nv">$1</span><span class="k">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding this to my .zshrc allows me to just type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cdw myawesomeprogram
</span></code></pre></td></tr></table></div></figure>


<p>and I&#8217;m immediately teleported to the folder which contains that program.</p>
]]><a href="http://victorquinn.com/blog/2012/10/15/cd-which-directory/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Capybara and RSpec to test Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"/>
    <updated>2012-10-11T14:49:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>I created a git repo with a framework for testing Drupal sites using Capybara webkit and RSpec so any Drupal developers can just clone it and go.</p>

<p><a href="https://github.com/victorquinn/drupal-capybara">View project on Github</a></p>

<h2>Rationale</h2>

<p>The first question I&#8217;m likely to get here is &#8220;Why?&#8221; Drupal has its own testing framework <a href="http://drupal.org/simpletest">SimpleTest</a> which can be used for both Unit and Functional tests, so why try to use RSpec/Ruby? Also, SimpleTest has access to all of the Drupal-y goodness, why write functional tests in Ruby where those functions would not be available?</p>

<p>That&#8217;s a great question. In my case I&#8217;m trying to run tests on a Drupal instance that is on a different machine. In my case I&#8217;m trying to run the tests from by desktop and hit my production web server which is on an offsite clustered server. Here SimpleTest wouldn&#8217;t fit the bill. These tests allow me to take into account network latency and such.</p>

<p>Note, of course since these tests are not in Drupal, tests written and performed like this will not do the setup/teardown like SimpleTest. So I would strongly suggest only touching data on test websites.</p>

<h2>Setup</h2>

<p>First, test that ruby exists and is the right version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -v
</span></code></pre></td></tr></table></div></figure>


<p>I used ruby 1.9.3-p194 managed by <a href="https://rvm.io">rvm</a> but I believe any 1.9+ version of ruby should work here with Capybara.</p>

<p>Next, clone my repo which is basically a skeleton setup ready to test Drupal using Capybara. In the repo I&#8217;ve included a file called default.config.yaml. You will want to copy that file to config.yaml. The Gemfile should be set up to install all necessary dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/victorquinn/drupal-capybara.git
</span><span class='line'>cp default.config.yaml config.yaml
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Now edit config.yaml and change the values to match the Drupal site you are testing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">site</span><span class="p-Indicator">:</span> <span class="s">&quot;http://mycoolwebsite.com&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myusername</span>
</span><span class='line'><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">abcd1234</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Is it working?</h2>

<p>I&#8217;ve included two sample tests, one which will just check to ensure the site can be hit and the second which should try logging in to your Drupal site using the values in config.yaml. I&#8217;ve tested this both on Drupal 6 and Drupal 7 and works out of the box on both.</p>

<p>Try to run the tests and ensure things work. Go to the root of that directory (drupal-capybara by default) and try to run it! (do not try to run this from inside the spec directory, you&#8217;ll get errors.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec spec
</span></code></pre></td></tr></table></div></figure>


<p>You should see something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2012-10-12 11:45:18.027 webkit_server<span class="o">[</span>73469:707<span class="o">]</span> *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</span><span class='line'>
</span><span class='line'>..
</span><span class='line'>
</span><span class='line'>Finished in 4.23 seconds
</span><span class='line'>2 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>The warnings can be safely ignored. I am not sure exactly why they&#8217;re there, something to do with the way the Capybara webkit code is with Mountain Lion. But it&#8217;s just a warning and doesn&#8217;t have anything to do with our web tests.</p>

<p>Note: The login test I included will only work if your system has not altered the login page. If something has changed the Log In button to say &#8220;Login&#8221; or &#8220;Go&#8221; or &#8220;Submit&#8221; or anything else, the test will fail. This is one of the downsides of trying to write tests for Drupal in a system that is not associated with Drupal &#8211; it cannot dynamically know about anything which has changed internal to Drupal.</p>

<p>** Capybara webkit can be a bit of a tricky beast to get installed on your system with dependencies and such. <a href="#troubleshooting_webkit">Jump to the bottom</a> to see more details on some possible solutions.</p>

<p>Now test that tests fail correctly by changing your password in config.yaml to a bad value and run it again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">site</span><span class="p-Indicator">:</span> <span class="s">&quot;http://mycoolwebsite.com&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myusername</span>
</span><span class='line'><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">notmypassword</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2012-10-12 11:42:51.760 webkit_server<span class="o">[</span>72603:707<span class="o">]</span> *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> DrupalTest login works
</span><span class='line'>     Failure/Error: verify_login_worked
</span><span class='line'>       expected <span class="c">#has_content?(&quot;Sorry, unrecognized username or password.&quot;) to return false, got true</span>
</span><span class='line'>     <span class="c"># ./spec/drupal_test_helper.rb:10:in `verify_login_worked&#39;</span>
</span><span class='line'>     <span class="c"># ./spec/drupal_capybara_spec.rb:27:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>Finished in 3.46 seconds
</span><span class='line'>2 examples, 1 failure
</span><span class='line'>
</span><span class='line'>Failed examples:
</span><span class='line'>
</span><span class='line'>rspec ./spec/drupal_capybara_spec.rb:25 <span class="c"># DrupalTest login works</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here failure is a good thing! Shouldn&#8217;t be able to log in if the password is wrong. Don&#8217;t forget to change your password back in config.yaml before moving on.</p>

<p>This isn&#8217;t a full rspec tutorial as such, but with my example tests that should be a good start. I&#8217;ve included a third sample test of filling out a Drupal form in my code (specifically in <em>spec/drupal_capybara_spec.rb</em>, but it&#8217;s commented out by default because that&#8217;s kind of specific to the particulars of the site and I didn&#8217;t want to send this out with tests likely to fail on most systems.</p>

<p>I should note, you can also run RSpec to get a nice HTML output. Just run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec spec --format html --out results.html
</span><span class='line'><span class="c"># And if you&#39;re on a Mac, to open the results in a browser, just run:</span>
</span><span class='line'>open results.html
</span></code></pre></td></tr></table></div></figure>


<p><em>You should be all set and ready to write some tests!</em></p>

<h2><a id="troubleshooting_webkit"></a>Troubleshooting Capybara Webkit</h2>

<p>Not to sugar coat things, I found Capybara Webkit pretty painful to get installed.</p>

<p>I&#8217;ll help with the issues I overcame, but generally it will likely involve some googling and such as it&#8217;s very dependent on the particulars of the system on which this is being run. For reference, I am on Mountain Lion (10.8.2) using ruby 1.9.3-p194. I also use <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> to manage packages.</p>

<p>If you get the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Installing capybara-webkit <span class="o">(</span>0.12.1<span class="o">)</span> with native extensions
</span><span class='line'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>        /Users/&lt;username&gt;/.rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Gem files will remain installed in /Users/&lt;username&gt;/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1 <span class="k">for </span>inspection.
</span><span class='line'>Results logged to /Users/&lt;username&gt;/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1/./gem_make.out
</span><span class='line'>An error occured <span class="k">while </span>installing capybara-webkit <span class="o">(</span>0.12.1<span class="o">)</span>, and Bundler cannot <span class="k">continue</span>.
</span><span class='line'>Make sure that <span class="sb">`</span>gem install capybara-webkit -v <span class="s1">&#39;0.12.1&#39;</span><span class="sb">`</span> succeeds before bundling.
</span></code></pre></td></tr></table></div></figure>


<p>Then it&#8217;s likely qt is not installed on your system. I resolved this by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install qt libpng
</span></code></pre></td></tr></table></div></figure>


<p>Mentioned above, but if you&#8217;re on Mountain Lion you will likely see a warning such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2012-10-11 18:16:42.457 webkit_server<span class="o">[</span>64967:707<span class="o">]</span> *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</span></code></pre></td></tr></table></div></figure>


<p>but it can safely be ignored.</p>

<p>If all else fails and you cannot get Webkit working on your system, Selenium can be used instead of Capybara Webkit so all this magic still works, just using Selenium instead of Webkit.</p>

<h3>Alternative setup with Selenium</h3>

<p>To use Selenium instead of headless Webkit, simply edit the drupal_capybara_spec.rb file as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Before</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:webkit</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:webkit</span>
</span><span class='line'><span class="c1"># After</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span></code></pre></td></tr></table></div></figure>

]]><a href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Agile Sprints]]></title>
    <link href="http://victorquinn.com/blog/2012/10/08/naming-agile-sprints/"/>
    <updated>2012-10-08T21:32:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/08/naming-agile-sprints</id>
    <content type="html"><![CDATA[<p>This is a trivial post of sorts.</p>

<p>There are 52 weeks in the year. My company follows 2 week sprints for development using an <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile Development</a> process called <a href="http://en.wikipedia.org/wiki/Scrum_(development">Scrum</a>).</p>

<p>52 divided by 2 yields 26.</p>

<p>How many letters are in the alphabet? Oh right, 26.</p>

<p>So using the letters A-Z it is possible to represent each sprint uniquely by just a letter of the alphabet just like hurricanes or Ubuntu.</p>

<p>So let&#8217;s make sprint planning, a generally dry and boring affair, interesting.</p>

<p>Since I began leading sprints in my role as team lead with my current employer, my team has planned each sprint using a letter of the alphabet. But not just a letter of the alphabet, we&#8217;ve used the first letter to represent some adjective and the second to represent a mythical god.</p>

<p>We have had such gems as Entropic <a href="http://en.wikipedia.org/wiki/Echo_(mythology)">Echo</a>, Fab <a href="http://en.wikipedia.org/wiki/Fortuna">Fortuna</a>, Hapless <a href="http://en.wikipedia.org/wiki/Lernaean_Hydra">Hydra</a>, Gravid <a href="http://en.wikipedia.org/wiki/Godhead">Godhead</a>, and we are currently nearing the end of Jovial <a href="http://en.wikipedia.org/wiki/Jah">Jah</a>.</p>

<p>I am hardly the first one to think of this, but it has done us well and adds some much needed jazz to an otherwise boring affair.</p>

<p>In the midst of one of the most tiresome aspects of development, the sprint planning, we begin a debate on which adjective/mythical being pair would best represent our current sprint. Excellent and enjoyable arguments ensue as each person argues that their adjective/god pair most closely resembles the sprint we have just planned. The monotony has been cut with an amusing nonsensical argument about how Entropic this sprint is or the etymology of God vs. Godhead vs. Gaia. What does it mean to be a God? Amusement rises from a once dry conversation as an excited debate ignites. Developers who were once dreary of the seemingly endless task of planning the coming weeks spring to life in an attempt to argue that their pairing of adjective and god is most apt.</p>

<p>And I&#8217;ve done so against resistance. I have been told that company policy forbade such a tactic, that tradition was to name the sprint by the (boring) start and end date and to diverge was verboten. I now technically name sprints by the start and end date, but tack on my team consensus amusing god name as a suffix. Since &#8220;Ardent Atlas&#8221; was forbidden, we now have &#8220;May 22 - June 5, Bashful Baal&#8221; to appease the powers that be while maintaining autonomy and team spirit.</p>

<p>The thing I love most about this is that there is no trickery here. This is not like the spoon zoomed toward the infant like it&#8217;s an airplane while the spoon holder mockingly looks down upon the infant as, well, infantile. Rather this is just a moment to enjoy the company of other intellectuals and have a respectful debate about something downright silly and frankly nonsensical to mix things up. It is an excuse to forget about the nitty gritty details of the boring nature of what had just been planned and just wax philosophically and passionately about definitions and minutiae in a manner which few other sectors af the human race would appreciate as much as developers happen to.</p>

<p>Keeping developers happy is arguably the greatest challenge in the management of software engineers and this little trivial tidbit has added some nice spice to an otherwise boring dish.</p>
]]><a href="http://victorquinn.com/blog/2012/10/08/naming-agile-sprints/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Tip #45]]></title>
    <link href="http://victorquinn.com/blog/2012/10/07/homebrew-tip-number-45/"/>
    <updated>2012-10-07T12:53:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/07/homebrew-tip-number-45</id>
    <content type="html"><![CDATA[<h2>Warm malt extract during brewing so less is wasted.</h2>

<p>When I start the homebrew process, the first step of which is sanitizing all my equipment, I first plug one of my sinks, put my liquid malt extract into it (still in its containers), then fill it with hot water.</p>

<p><img class="center" src="http://victorquinn.com/images/lme1.png"></p>

<p>I pick up the liquid malt extract container from time to time and give it a shake to evenly distribute it throughout the container. I also periodically drain and refresh the hot water it&#8217;s bathed in to keep it hot as the malt extract absorbs the heat. This also melts the glue so the labels can be pulled off easily. You&#8217;ll see in my image above that one has its label all the way off and the other is starting to peel. Removing this makes doubly sure that nothing falls into the wort.</p>

<p>By doing this, it makes the malt extract much more viscous (read: runny) so when it comes time to add it to the wort, less is wasted because more of it runs out while pouring and less sticks to the inside of the container.</p>

<p>Bonus: If using a plastic container with a lid (for example with <a href="http://www.amazon.com/gp/product/B000V5XAQK/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000V5XAQK&amp;linkCode=as2&amp;tag=victorqcom-20" title="">Briess Liquid Malt Extract</a>) you can do as above, but also, after pouring out the malt extract, you can fill this plastic container with hot water from the tap, shake it around, and pour it into the wort. This will ensure even more of your malt extract makes its way into the wort and little is wasted. This can also be done with an aluminum can but it will be less efficient.</p>
]]><a href="http://victorquinn.com/blog/2012/10/07/homebrew-tip-number-45/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating Fielded Nodes in Drupal 7]]></title>
    <link href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"/>
    <updated>2012-08-11T18:23:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>You&#8217;ve just created your new super awesome node type in Drupal 7 using the (now in core!) Content type editor.</p>

<p><img class="center" src="http://victorquinn.com/images/contenttype1.png"></p>

<p>Now you want to programmatically generate some Super Awesome Content nodes. Some <a href="https://www.google.com">Googling</a> (or <a href="https://duckduckgo.com">Ducking</a>!) will land you with some snippets that look as follows:</p>

<figure class='code'><figcaption><span>Works with standard node  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">create_my_node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">type</span> <span class="o">=</span> <span class="s1">&#39;blog&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_object_prepare</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="s2">&quot;My Awesome Title&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">language</span> <span class="o">=</span> <span class="nx">LANGUAGE_NONE</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_save</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Problem</h3>

<p>Since you&#8217;ve defined a custom content type, you may think something like the following would work great with your new custom node type to set your custom field values:</p>

<figure class='code'><figcaption><span>Attempt with custom node (this will fail!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">create_my_node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">type</span> <span class="o">=</span> <span class="s1">&#39;super_awesome_content&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_object_prepare</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="s2">&quot;My Awesome Title&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">language</span> <span class="o">=</span> <span class="nx">LANGUAGE_NONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Try to set your custom field values</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span> <span class="o">=</span> <span class="s2">&quot;Too many to count...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_awesome_points</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_save</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, that will fail! Why? Because you can&#8217;t set node custom fields like you may expect with <em>$node->{$key}</em>.</p>

<p><em>In my opinion, this is one thing Drupal 7 got very wrong. I&#8217;ll explain their rationale in a bit after showing the correct way to do this and it does make some sense, but it seems unnecessarily complicated.</em></p>

<h3>The Solution</h3>

<p>Instead of trying to set those custom field attributes directly, you have to use the following funky syntax:</p>

<figure class='code'><figcaption><span>Successful attempt with custom node (this totally works!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">create_my_node</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">type</span> <span class="o">=</span> <span class="s1">&#39;super_awesome_content&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_object_prepare</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="s2">&quot;My Awesome Title&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">language</span> <span class="o">=</span> <span class="nx">LANGUAGE_NONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Try to set your custom field</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Too many to count...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_awesome_points</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_save</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Huh? What&#8217;s with this <em>[&#8216;und&#8217;][0][&#8216;value&#8217;]</em> stuff?</p>

<p>Well, it&#8217;s a bit complicated. Let&#8217;s break it down piece by piece</p>

<h4>[&#8216;und&#8217;]</h4>

<p>This first bit is the language to be applied to the field. <em>&#8216;und&#8217;</em> is the key specifying that the language is undefined. This could also be &#8216;en&#8217; or &#8216;de&#8217; or &#8216;fr&#8217; or any other 2 letter language code if a particular language is specified for this field.</p>

<h4>[0]</h4>

<p>This is an array index. For any single value fields like the ones we have, this is just [0]. But it&#8217;s conceivable to have multiple values in which this would kind of make sense. For example, let&#8217;s say our reasons_for_being_awesome field was a multi-value field:</p>

<figure class='code'><figcaption><span>Multi-value field  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Too many to count...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Reason number 2&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Another reason&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;The most important reason&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">node_save</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it makes some sense for the array index to be there, but it&#8217;s somewhat confusing for what is arguably the main use case &#8211; namely trying to assign a single value to a field.</p>

<h4>[&#8216;value&#8217;]</h4>

<p>This may be the oddest piece. There are a few other keys which could be specified here, among them <em>[&#8216;format&#8217;]</em> and <em>[&#8216;summary&#8217;]</em>, but when working programmatically with custom fields, it&#8217;s rare to be setting anything other than <em>[&#8216;value&#8217;]</em>.</p>

<h3>Summary</h3>

<figure class='code'><figcaption><span>Summary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="c1">// Won&#39;t work</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span> <span class="o">=</span> <span class="s2">&quot;Too many to count...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_awesome_points</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Will work</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_reasons_for_being_awesome</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Too many to count...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">field_awesome_points</span><span class="p">[</span><span class="s1">&#39;und&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Commentary</h3>

<p>I think Drupal should be much better here and dropped the ball for developers by not allowing the first method above to work. This [&#8216;und&#8217;][0][&#8216;value&#8217;] mess may make it easier for the system to deal with the input, but it makes things far more difficult/complicated for developers. This is an area where it&#8217;s painfully clear that the Drupal Field API is not a true ORM like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and in my opinion that&#8217;s a missed opportunity.</p>

<p>Ideally the system would be able to default to allowing things to be set with just the key and not require developers to specify the language, array index, and value key every single time a value is set to the field.</p>
]]><a href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Motorcycle!]]></title>
    <link href="http://victorquinn.com/blog/2012/04/22/my-new-motorcycle/"/>
    <updated>2012-04-22T19:30:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/04/22/my-new-motorcycle</id>
    <content type="html"><![CDATA[<p>Went out yesterday and bought myself a new toy.</p>

<p><img class="center" src="http://victorquinn.com/images/motorcycle.jpg"></p>

<p>It&#8217;s a <a href="http://www.harley-davidson.com/en_US/Motorcycles/1200-custom.html">2012 Harley Davidson Sportster 1200 Custom</a></p>

<p>I have more pics on <a href="http://www.flickr.com/photos/victorquinn/sets/72157629504793470/">flickr</a>.</p>
]]><a href="http://victorquinn.com/blog/2012/04/22/my-new-motorcycle/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyNation 2012]]></title>
    <link href="http://victorquinn.com/blog/2012/03/22/rubynation-2012/"/>
    <updated>2012-03-22T23:05:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/22/rubynation-2012</id>
    <content type="html"><![CDATA[<p>I&#8217;ll be at RubyNation 2012 tomorrow.</p>

<p>Getting my laptop set up and ready to roll so I&#8217;ll be ready to code like a madman.</p>

<p>I love <a href="http://victorquinn.com/blog/2012/03/15/attending-rubynation-2012/">conferences</a> ;)</p>

<p>If you&#8217;ll be there, find me or <a href="https://twitter.com/intent/tweet?screen_name=victorquinn" class="twitter-mention-button" data-lang="en">Tweet to @victorquinn</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

]]><a href="http://victorquinn.com/blog/2012/03/22/rubynation-2012/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solved: git svn broken in Mountain Lion DP2]]></title>
    <link href="http://victorquinn.com/blog/2012/03/20/solved-git-svn-broken-in-mountain-lion-dp2/"/>
    <updated>2012-03-20T22:08:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/20/solved-git-svn-broken-in-mountain-lion-dp2</id>
    <content type="html"><![CDATA[<p>Over this past weekend, I installed Mountain Lion Developer Preview 2 (DP2).</p>

<p>It came with another version of Xcode and I was heartbroken to once again see that git svn was broken!</p>

<p>However, I was relieved to find that my <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">previous solution</a> worked like a charm. I was able to copy-paste the exact commands again and everything worked perfectly.</p>

<p>I updated the former post accordingly and it&#8217;s available <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">here</a></p>
]]><a href="http://victorquinn.com/blog/2012/03/20/solved-git-svn-broken-in-mountain-lion-dp2/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Ubercart Module for Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal/"/>
    <updated>2012-03-16T16:46:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal</id>
    <content type="html"><![CDATA[<p>Back in October of last year, I wrote an Ubercart plugin for Stripe <sup><a href="#stripe1">[1]</a></sup>, a payment API created to be developer conscious and easy to use. I loved the idea of Stripe <sup><a href="#stripe2">[2]</a></sup> and was using Ubercart for a project and noticed there was no module so I created it.</p>

<p>It was the first contrib module I had created entirely from scratch on my own which made it through the Drupal.org submission process. I&#8217;ve written many custom modules for my employer and for side projects, but this was my first time going through the gauntlet of the review process for getting a contrib module on Drupal.org. For the curious, you can see the whole back and forth on this issue: <a href="http://drupal.org/node/1339850">http://drupal.org/node/1339850</a></p>

<p>I recently noticed Stripe links back to my module from their site.<sup><a href="#stripe3">[3]</a></sup></p>

<p><a id="stripe1"></a>[1] <a href="http://drupal.org/project/uc_stripe">Ubercart plugin for Stripe</a>
<a id="stripe2"></a>[2] <a href="https://stripe.com">Stripe</a>
<a id="stripe3"></a>[3] <a href="site.https://stripe.com/docs/libraries#third-party">Stripe link to my Ubercart Stripe Module</a></p>
]]><a href="http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Conference Excitement]]></title>
    <link href="http://victorquinn.com/blog/2012/03/15/attending-rubynation-2012/"/>
    <updated>2012-03-15T10:36:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/15/attending-rubynation-2012</id>
    <content type="html"><![CDATA[<p>Excited to attend the <a href="http://www.rubynation.org/">RubyNation</a> 2012 conference next week!</p>

<p>This will be the first year since 2009 that I will not be attending <a href="http://denver2012.drupal.org/">DrupalCon</a> <sup><a href="#excitement1">[1]</a></sup> and my conference itch needs scratching.</p>

<p>I find generally that conference excitement manifests itself in a handful of ways.</p>

<h2>New Things!</h2>

<p>My favorite thing about attending a programming conference is the excitement I have during and immediately after for all the new things I will learn at the conference.</p>

<p>Every time I walk out of a room where someone was giving a presentation on a cool new technology or process, in the back of my head I am thinking of how I can work that technology or process into each of my current projects. Or I am pondering what old projects I could revamp or new projects I could start using this technology as a launchpad which were previously out of scope or cost prohibitive.</p>

<p>Setting aside the new things themselves, this type of self-reflection and evaluation is invaluable. I strive for this type of reflection in my everyday life, but it&#8217;s much easier in this type of forum, removed from the daily doldrums of life at the office. Having traveled to a conference, often far away, and broken the routine, it is easier to have this kind of perspective.</p>

<p>New things also inherently bring excitement for their new-ness, particularly for a person like myself. Some people enjoy consistency and sameness and have an aversion to change. I am the exact opposite and view a new thing as a new challenge ready and ripe for besting. It also represents uncharted territory and I am definitely an explorer.</p>

<h2>High Energy Environment</h2>

<p>There is always an extremely high energy level at such conferences.</p>

<p>The speakers have high energy, speaking excitedly about something interesting they have recently worked on in an attempt to proselytize.</p>

<p>This in turn leads me (and others) to similarly get excited about their new thing. This kind of network effect is huge. When high energy people start bouncing ideas off of each other in a sort of feedback loop, great things can result.</p>

<p><span class='pullquote-right' data-pullquote='Never weary of the cost to implement, I am a constant proponent for whatever will be objectively best.'>
I had a reputation with my co-workers of being the guy with the kooky fringe ideas. This is because I was always excited about the possibility of using new and more efficient concepts in our projects. For someone like me, a conference was like crack. Never weary of the cost to implement, I am a constant proponent for whatever will be objectively best. It always led to interesting meals during conferences with me excitedly ranting about how we could use X for this project or Y for that project with my co-workers offering counterpoints to keep me grounded. I&#8217;m sure they grew weary at times, but my co-workers generally allowed me to indulge.
</span></p>

<p>My first week back after a conference is always absorbed by planning and trying to implement many of the new things I learned at the conference or figuring out a reason why I couldn&#8217;t or shouldn&#8217;t. I feel like I&#8217;m kicked into high gear, being three times as productive that week as any other while I run on the natural high from learning about new things as most people run on coffee.</p>

<p><span class='pullquote-left' data-pullquote='My employer benefited greatly as a result, but that was not my intent in working like mad.'>
I notice myself staying voluntarily late at work and working much longer hours than normal or necessary which, for a salaried employee, was solely for my own personal enjoyment. My employer benefited greatly as a result, but that was not my intent in working like mad. I was rushing to solve a new puzzle, to conquer a new opponent. I was working purely for enjoyment.
</span></p>

<p>Another high energy aspect is that each of the attendees is there to learn. Almost like a wedding, where another new beginning is celebrated, most attendees are embarking on a journey of their own with a technology. Most attendees get a break from their normal day at the office and this fills them with energy and joy they wouldn&#8217;t otherwise have.</p>

<p>Being around people in a natural state of high energy serves to amplify the learning and the network effects of the conference.</p>

<h2>Networking</h2>

<p>And of course there is the value of networking. Many people go to developer conferences primarily for this aspect.</p>

<p><span class='pullquote-right' data-pullquote='It is nearly priceless to compare notes on problems, solved and unsolved, and initiate future collaborations.'>
It is incredibly useful to meet other people doing similar things. It is nearly priceless to compare notes on problems, solved and unsolved, and initiate future collaborations.
</span></p>

<p>There are certainly attendees whose primary mission at a conference is to network. At times this can get a bit predatory, but in general it is a net positive.</p>

<p>Particularly in the open source community, finding that someone else has already solved a problem and is willing to share the solution could save days or weeks or more of developer time.</p>

<p>For a seasoned programmer looking for a job, this is a great way to feel out potential employers. Not only would I be hesitant to work as a programmer at a company that failed to value such events, developer conferences are a great way to be introduced to other employees of a company and see what they are working on. It opens the door to talking with these people directly about their work in a manner that is not easy in everyday business. In the case of an open source technology, conference attendance, sponsorship, and the contribution to sessions by an employer are all indicative of a company that contributes back to open source, values the community aspect, and fosters innovation.</p>

<h2>It&#8217;s Not All Rainbows, But It&#8217;s Close</h2>

<p>One major downside is that having someone stand in front of you and preach excitedly about their latest thing can, at times, be misleading.</p>

<p>This is not to say the speakers intentionally or negligently mislead, but each one often discusses the highlights of their new thing without strongly discussing the downsides. This makes sense as their intent at speaking at a conference is generally not purely to educate, but also to drum up support for their new thing or for publicity for their company or themselves. This results in many of the sessions having some kind of bias or marketing twist. This unsurprising as the speakers are often incentivized to do so and without such sponsorship most conferences would not exist, but it is necessary to remain cognizant of this facet when sitting in a session whose speakers claims are on par with claiming to have invented a better mouse trap.</p>

<p>Sometimes when I get back from a conference and decompress, I find myself thinking, &#8220;Wait, this only works in that specific instance? How is that even helpful?&#8221;</p>

<p><span class='pullquote-left' data-pullquote='Once the honeymoon period ends on some of these new things, it becomes apparent that instead of sliced bread, they&#8217;re just the same old bread repackaged in a shiny shell.'>
Once the honeymoon period ends on some of these new things, it becomes apparent that instead of sliced bread, they&#8217;re just the same old bread repackaged in a shiny shell. On the other hand, even the discovery that some of the newfangled technologies offer little benefits over tried and true methods can itself be a significant benefit.
</span></p>

<p>Further, while every new thing cannot itself be directly applicable and useful, each new thing that a developer learns is yet another thing they can add to their arsenal. Then sometime in the future, they will have the knowledge of how a problem was once solved and whether it would be useful in a given set of circumstances. So while it will not all bear fruit, gaining knowledge from a conference, as it does in any realm, serves to enrich the developer&#8217;s background for future endeavors.</p>

<p>If you are attending <a href="http://www.rubynation.org/">RubyNation 2012</a>, I hope to see you there!</p>

<p><a id="excitement1"></a>[1] I would <em>love</em> to attend DrupalCon this year, but the timing and travel just didn&#8217;t work out. Thankfully, <a href="http://www.rubynation.org/">RubyNation</a> is being held right in my backyard!</p>
]]><a href="http://victorquinn.com/blog/2012/03/15/attending-rubynation-2012/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert .png to .eps on a Mac]]></title>
    <link href="http://victorquinn.com/blog/2012/03/13/convert-png-to-eps/"/>
    <updated>2012-03-13T22:31:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/13/convert-png-to-eps</id>
    <content type="html"><![CDATA[<p>This is one of those tips that seems almost too easy to be true.</p>

<p>My <a href="http://victorquinn.com/files/VQResumeLatest.pdf">resume</a> and cover letters are written in <a href="http://www.latex-project.org/">LaTeX</a>. LaTeX is a typesetting system often used for creating technical documents as it is particularly good at creating complex documents including scientific equations. I have been using it for a few years to draft documents both because it gives me a lot of control over the output and so that I could prepare myself for working with technical documents such as patents which are likely be written in LaTeX.</p>

<p>I wanted to include my signature in a cover letter. In order to do so in LaTeX, it required a graphic in <em>.eps</em> format. However, my signature was a <em>.png</em> image. I searched for awhile until I came across the answer which was so simple I felt silly for not knowing it.</p>

<p>I thought it may prove useful to someone else. This is a command line trick, so if you are not familiar with a terminal, this tip will not be of much help. Without further adieu:</p>

<p>Simply use the <em>convert</em> command line utility to convert it.</p>

<figure class='code'><figcaption><span>Convert Command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>convert image.png image.eps
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it was that easy! Out came a perfect .eps file which I was able to use in my LaTeX document. The <a href="http://man.cx/convert"><em>convert</em></a> command has all sorts of other options for resizing and many other things, but for simply doing a straight conversion, that was all!</p>

<p>Worth noting, while this worked for <em>.png</em> to <em>.eps</em>, it also works for <em>.jpg</em> to <em>.eps</em> and <em>.gif</em> to <em>.eps</em>. Have not tested anything else, but it appears to be pretty versatile!</p>
]]><a href="http://victorquinn.com/blog/2012/03/13/convert-png-to-eps/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yahoo sues Facebook for Patent Infringement]]></title>
    <link href="http://victorquinn.com/blog/2012/03/13/yahoo-sues-facebook-for-patent-infringement/"/>
    <updated>2012-03-13T09:51:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/13/yahoo-sues-facebook-for-patent-infringement</id>
    <content type="html"><![CDATA[<p>Wow. It will be interesting to see how this plays out.</p>

<p><a href="http://www.reuters.com/article/2012/03/12/us-yahoo-facebook-lawsuit-idUSBRE82B18M20120312">link</a></p>
]]><a href="http://victorquinn.com/blog/2012/03/13/yahoo-sues-facebook-for-patent-infringement/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fun.]]></title>
    <link href="http://victorquinn.com/blog/2012/03/09/fun/"/>
    <updated>2012-03-09T08:23:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/03/09/fun</id>
    <content type="html"><![CDATA[<p>Can&#8217;t stop listening to a band called <a href="http://www.ournameisfun.com/">fun.</a></p>

<p>Especially this song:</p>

<iframe width="390" height="80" src="http://rd.io/i/QVa2gjexPO4" frameborder="0"></iframe>

]]><a href="http://victorquinn.com/blog/2012/03/09/fun/"><strong>∮</strong></a><br /><br /></content>
  </entry>
  
</feed>
