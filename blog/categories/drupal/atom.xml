<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drupal | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/drupal/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2012-12-23T15:49:45-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Civic Drupal Module]]></title>
    <link href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"/>
    <updated>2012-10-26T16:28:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module</id>
    <content type="html"><![CDATA[<p>One of the nice things about working for a political company is the ability to work in a fast-moving field, especially close to election time.</p>

<p>Just a few weeks ago Google came out with a new API called <a href="https://developers.google.com/civic-information/">Civic</a> which allows you to pass in an address and get back a bunch of information related to voting in the upcoming election. It will return things such as polling places, candidates, and other election information.</p>

<p><img class="center" src="/images/google.png"></p>

<p>Our company took this to task and created a Drupal module which interacts with this new API service so people can easily add a "Find my polling place" widget to their Drupal website. This should hopefully get more people informed about the election and getting out to vote.</p>

<p>For my part, I took the Drupal 6 version created by my co-workers and ported it to Drupal 7. I also added (Drupal 7 only for now) some other cool info based on your address such as information on the relevant contests and links to the candidate pages so voters can be well informed going into election day.</p>

<p>Check it out!</p>

<p><a href="http://d7demo.ngpvanhost.com">Try out a demo</a></p>

<p><a href="http://drupal.org/project/google_civic">Module page on drupal.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Capybara and RSpec to test Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"/>
    <updated>2012-10-11T14:49:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>I created a git repo with a framework for testing Drupal sites using Capybara webkit and RSpec so any Drupal developers can just clone it and go.</p>

<p><a href="https://github.com/victorquinn/drupal-capybara">View project on Github</a></p>

<h2>Rationale</h2>

<p>The first question I'm likely to get here is "Why?" Drupal has its own testing framework <a href="http://drupal.org/simpletest">SimpleTest</a> which can be used for both Unit and Functional tests, so why try to use RSpec/Ruby? Also, SimpleTest has access to all of the Drupal-y goodness, why write functional tests in Ruby where those functions would not be available?</p>

<p>That's a great question. In my case I'm trying to run tests on a Drupal instance that is on a different machine. In my case I'm trying to run the tests from by desktop and hit my production web server which is on an offsite clustered server. Here SimpleTest wouldn't fit the bill. These tests allow me to take into account network latency and such.</p>

<p>Note, of course since these tests are not in Drupal, tests written and performed like this will not do the setup/teardown like SimpleTest. So I would strongly suggest only touching data on test websites.</p>

<h2>Setup</h2>

<p>First, test that ruby exists and is the right version.</p>

<p><code>bash
ruby -v
</code></p>

<p>I used ruby 1.9.3-p194 managed by <a href="https://rvm.io">rvm</a> but I believe any 1.9+ version of ruby should work here with Capybara.</p>

<p>Next, clone my repo which is basically a skeleton setup ready to test Drupal using Capybara. In the repo I've included a file called default.config.yaml. You will want to copy that file to config.yaml. The Gemfile should be set up to install all necessary dependencies.</p>

<p><code>bash
git clone git://github.com/victorquinn/drupal-capybara.git
cp default.config.yaml config.yaml
bundle install
</code></p>

<p>Now edit config.yaml and change the values to match the Drupal site you are testing.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: abcd1234
</code></p>

<h2>Is it working?</h2>

<p>I've included two sample tests, one which will just check to ensure the site can be hit and the second which should try logging in to your Drupal site using the values in config.yaml. I've tested this both on Drupal 6 and Drupal 7 and works out of the box on both.</p>

<p>Try to run the tests and ensure things work. Go to the root of that directory (drupal-capybara by default) and try to run it! (do not try to run this from inside the spec directory, you'll get errors.)</p>

<p><code>bash
rspec spec
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:45:18.027 webkit_server[73469:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>..</p>

<p>Finished in 4.23 seconds
2 examples, 0 failures
```
The warnings can be safely ignored. I am not sure exactly why they're there, something to do with the way the Capybara webkit code is with Mountain Lion. But it's just a warning and doesn't have anything to do with our web tests.</p>

<p>Note: The login test I included will only work if your system has not altered the login page. If something has changed the Log In button to say "Login" or "Go" or "Submit" or anything else, the test will fail. This is one of the downsides of trying to write tests for Drupal in a system that is not associated with Drupal -- it cannot dynamically know about anything which has changed internal to Drupal.</p>

<p>** Capybara webkit can be a bit of a tricky beast to get installed on your system with dependencies and such. <a href="#troubleshooting_webkit">Jump to the bottom</a> to see more details on some possible solutions.</p>

<p>Now test that tests fail correctly by changing your password in config.yaml to a bad value and run it again.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: notmypassword
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:42:51.760 webkit_server[72603:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>Failures:</p>

<p>  1) DrupalTest login works</p>

<pre><code> Failure/Error: verify_login_worked
   expected #has_content?("Sorry, unrecognized username or password.") to return false, got true
 # ./spec/drupal_test_helper.rb:10:in `verify_login_worked'
 # ./spec/drupal_capybara_spec.rb:27:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 3.46 seconds
2 examples, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/drupal_capybara_spec.rb:25 # DrupalTest login works
```</p>

<p>Here failure is a good thing! Shouldn't be able to log in if the password is wrong. Don't forget to change your password back in config.yaml before moving on.</p>

<p>This isn't a full rspec tutorial as such, but with my example tests that should be a good start. I've included a third sample test of filling out a Drupal form in my code (specifically in <em>spec/drupal_capybara_spec.rb</em>, but it's commented out by default because that's kind of specific to the particulars of the site and I didn't want to send this out with tests likely to fail on most systems.</p>

<p>I should note, you can also run RSpec to get a nice HTML output. Just run the following:</p>

<p>``` bash
rspec spec --format html --out results.html</p>

<h1>And if you're on a Mac, to open the results in a browser, just run:</h1>

<p>open results.html
```
<em>You should be all set and ready to write some tests!</em></p>

<h2><a id="troubleshooting_webkit"></a>Troubleshooting Capybara Webkit</h2>

<p>Not to sugar coat things, I found Capybara Webkit pretty painful to get installed.</p>

<p>I'll help with the issues I overcame, but generally it will likely involve some googling and such as it's very dependent on the particulars of the system on which this is being run. For reference, I am on Mountain Lion (10.8.2) using ruby 1.9.3-p194. I also use <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> to manage packages.</p>

<p>If you get the following error:</p>

<p>``` bash
Installing capybara-webkit (0.12.1) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>    /Users/&lt;username&gt;/.rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb
</code></pre>

<p>Gem files will remain installed in /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1 for inspection.
Results logged to /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1/./gem_make.out
An error occured while installing capybara-webkit (0.12.1), and Bundler cannot continue.
Make sure that <code>gem install capybara-webkit -v '0.12.1'</code> succeeds before bundling.
```
Then it's likely qt is not installed on your system. I resolved this by running:</p>

<p><code>bash
brew install qt libpng
</code></p>

<p>Mentioned above, but if you're on Mountain Lion you will likely see a warning such as:</p>

<p><code>bash
2012-10-11 18:16:42.457 webkit_server[64967:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</code></p>

<p>but it can safely be ignored.</p>

<p>If all else fails and you cannot get Webkit working on your system, Selenium can be used instead of Capybara Webkit so all this magic still works, just using Selenium instead of Webkit.</p>

<h3>Alternative setup with Selenium</h3>

<p>To use Selenium instead of headless Webkit, simply edit the drupal_capybara_spec.rb file as follows:</p>

<p>``` ruby</p>

<h1>Before</h1>

<p>Capybara.default_driver = :webkit
Capybara.javascript_driver = :webkit</p>

<h1>After</h1>

<p>Capybara.default_driver = :selenium
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating Fielded Nodes in Drupal 7]]></title>
    <link href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"/>
    <updated>2012-08-11T18:23:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>You've just created your new super awesome node type in Drupal 7 using the (now in core!) Content type editor.</p>

<p><img class="center" src="/images/contenttype1.png"></p>

<p>Now you want to programmatically generate some Super Awesome Content nodes. Some <a href="https://www.google.com">Googling</a> (or <a href="https://duckduckgo.com">Ducking</a>!) will land you with some snippets that look as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Works with standard node  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;blog&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Problem</h3>

<p>Since you've defined a custom content type, you may think something like the following would work great with your new custom node type to set your custom field values:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Attempt with custom node (this will fail!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field values</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, that will fail! Why? Because you can't set node custom fields like you may expect with <em>$node->{$key}</em>.</p>

<p><em>In my opinion, this is one thing Drupal 7 got very wrong. I'll explain their rationale in a bit after showing the correct way to do this and it does make some sense, but it seems unnecessarily complicated.</em></p>

<h3>The Solution</h3>

<p>Instead of trying to set those custom field attributes directly, you have to use the following funky syntax:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Successful attempt with custom node (this totally works!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Huh? What's with this <em>['und'][0]['value']</em> stuff?</p>

<p>Well, it's a bit complicated. Let's break it down piece by piece</p>

<h4>['und']</h4>

<p>This first bit is the language to be applied to the field. <em>'und'</em> is the key specifying that the language is undefined. This could also be 'en' or 'de' or 'fr' or any other 2 letter language code if a particular language is specified for this field.</p>

<h4>[0]</h4>

<p>This is an array index. For any single value fields like the ones we have, this is just [0]. But it's conceivable to have multiple values in which this would kind of make sense. For example, let's say our reasons_for_being_awesome field was a multi-value field:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Multi-value field  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][1][&#39;value&#39;] = &quot;Reason number 2&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][2][&#39;value&#39;] = &quot;Another reason&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][3][&#39;value&#39;] = &quot;The most important reason&quot;;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it makes some sense for the array index to be there, but it's somewhat confusing for what is arguably the main use case -- namely trying to assign a single value to a field.</p>

<h4>['value']</h4>

<p>This may be the oddest piece. There are a few other keys which could be specified here, among them <em>['format']</em> and <em>['summary']</em>, but when working programmatically with custom fields, it's rare to be setting anything other than <em>['value']</em>.</p>

<h3>Summary</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Summary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  // Won&#39;t work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Will work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Commentary</h3>

<p>I think Drupal should be much better here and dropped the ball for developers by not allowing the first method above to work. This ['und'][0]['value'] mess may make it easier for the system to deal with the input, but it makes things far more difficult/complicated for developers. This is an area where it's painfully clear that the Drupal Field API is not a true ORM like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and in my opinion that's a missed opportunity.</p>

<p>Ideally the system would be able to default to allowing things to be set with just the key and not require developers to specify the language, array index, and value key every single time a value is set to the field.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Ubercart Module for Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal/"/>
    <updated>2012-03-16T16:46:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal</id>
    <content type="html"><![CDATA[<p>Back in October of last year, I wrote an Ubercart plugin for Stripe <sup><a href="#stripe1">[1]</a></sup>, a payment API created to be developer conscious and easy to use. I loved the idea of Stripe <sup><a href="#stripe2">[2]</a></sup> and was using Ubercart for a project and noticed there was no module so I created it.</p>

<p>It was the first contrib module I had created entirely from scratch on my own which made it through the Drupal.org submission process. I've written many custom modules for my employer and for side projects, but this was my first time going through the gauntlet of the review process for getting a contrib module on Drupal.org. For the curious, you can see the whole back and forth on this issue: <a href="http://drupal.org/node/1339850">http://drupal.org/node/1339850</a></p>

<p>I recently noticed Stripe links back to my module from their site.<sup><a href="#stripe3">[3]</a></sup></p>

<p><a id="stripe1"></a>[1] <a href="http://drupal.org/project/uc_stripe">Ubercart plugin for Stripe</a>
<a id="stripe2"></a>[2] <a href="https://stripe.com">Stripe</a>
<a id="stripe3"></a>[3] <a href="site.https://stripe.com/docs/libraries#third-party">Stripe link to my Ubercart Stripe Module</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monster Menus and Drupal Multisite]]></title>
    <link href="http://victorquinn.com/blog/2012/03/06/monster-menus-and-drupal-multisite/"/>
    <updated>2012-03-06T21:48:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/03/06/monster-menus-and-drupal-multisite</id>
    <content type="html"><![CDATA[<h2>Monster Menus</h2>

<p>Over my years working at <a href="https://www.amherst.edu">Amherst College</a>, I have been fortunate enough to have played a part in helping to develop and create a module for <a href="http://drupal.org">Drupal</a> called <a href="http://drupal.org/project/monster_menus">Monster Menus</a>. The module is a Monster! (pun intended)</p>

<p>The capabilities it adds to out of the box Drupal are quite incredible. It plugs many gaping holes in Drupal which made it suitable for use by a large institution such as Amherst College.</p>

<h3>Permissions gaps in core Drupal</h3>

<p>Out of the box, Drupal is quite limited in terms of its permission capabilities. It has a concept of roles which it uses for permissions. This is fine for many small sites or sites where there are limited content creators, but on a site with tens of thousands of users creating content, this starts to break down quickly.</p>

<p>In the simplest terms, Monster Menus layers, on top of the standard Drupal access permissions, a series of access permissions which approximate the permissions given to any modern filesystem.</p>

<p>For example, in any linux or unix based system, there are permissions such as read, write, execute which can be given to users and/or groups. This allows for very rich and nuanced access privileges such as John can edit this file but he cannot view this folder. View the screenshot below of the Monster Menus permissions interface for a given page:</p>

<p><img class="center" src="/images/mm1.png"></p>

<p>As you can see, this is very similar to the permissions structure of a filesystem. As a result, this allows for things such as, "all instructors in the English department can edit the English department website" or "only John Doe can add content to this page and everyone can read it" or "John and members of the English department group can read this page but no one else can." This kind of nuanced permissions is simply not available in off-the-shelf Drupal.</p>

<h3>The Approach Other Large Institutions Have Taken</h3>

<p>Many institutions have run into similar issues and have solved it a few different ways.</p>

<h4>Organic Groups</h4>

<p>The first is by using something called <a href="http://drupal.org/project/og">Organic Groups</a>.</p>

<p>It does add the concept of Groups to Drupal, but does not appropriately offer the nuanced permissions described above. For example, it would not allow for something such as "only members of the English department and John and members of the Philosophy department can edit this page."</p>

<h4>Separate Drupal Instances and Subdomains</h4>

<p>The second is by creating an entirely different Drupal instance for each site and using subdomains.</p>

<p>This has many downsides, the most notable being that updating can be a monstrous pain.</p>

<p>At DrupalCon last year, I spoke with someone from another college that had ~160 different Drupal instances! They had a different instance for every single educational department in their large university. So they were trying to figure out a way to update the codebase in 160 directories and then run scripts to update 160 databases.</p>

<p>He was asking how other places dealt with the process of updating because it was almost a full-time job just for him to run around and update all of these separate instances. Ouch.</p>

<p>The other major downside is that, by using subdomains like english.college.edu or physics.college.edu is that, since they have different subdomains, they don't share Google juice.</p>

<h3>Amherst College Paved Their Own Path</h3>

<p>As a result, when Amherst College wanted to adopt Drupal as their content management system, they needed a solution to deliver these kind of nuanced permissions and, since neither Organic Groups or these Separate Instances scaled, they decided to pave their own path.</p>

<p>Thus Monster Menus was born.</p>

<p>(<a href="http://drupal.org/project/monster_menus">Monster Menus</a> will likely get a broader treatment in a later blog post as I love discussing it!)</p>

<h2>Drupal Multisite</h2>

<p>One of the benefits of Drupal is that it can be set up in a multisite configuration. This allows multiple sites to share a single codebase which in turn leads to easier updates downstream. Having to only modify files once per server instead of once per website hosted on that server can be a huge time-saver.</p>

<p>However, as each Drupal instance in a multisite configuration shares the same code, they each have different databases so, for all intents and purposes, each one is an entirely separate and siloed site.</p>

<p><img class="center" src="/images/mm2.png"></p>

<p>With this kind of configuration, on my web server I have a single instance of the Drupal codebase and, utilize a multisite configuration to have about a dozen different Drupal instances each with their own database. These sites each look like their own completely separate entities to the outside world (most notably because they have entirely different URLs), but under the hood they share a lot of the same codebase.</p>

<p>The primary developer of Monster Menus had the wise foresight to build in the capability to use it with a multisite configuration. His instructions can be found on Drupal's website:</p>

<blockquote><p><a href="http://drupal.org/node/1366320">Multiple Drupal Sites with One Monster Menus Tree</a></p></blockquote>

<h2>Deploying Monster Menus with Drupal Multisite</h2>

<p>I have recently taken some time to work on some web projects for myself. Two of those projects were related and needed some nuanced permissions so I took it as a great opportunity to deploy Monster Menus (MM hereafter) in my own environment and try out the multisite capabilities to share users, permissions, etc. between the two.</p>

<p>So I followed <a href="http://drupal.org/node/1366320">the instructions</a>, installed MM on one instance, then using multisite created another instance, pointing it to use the same database. This leads to the following configuration:</p>

<p><img class="center" src="/images/mm3.png"></p>

<p>This is when the problems started to arise. First, those instructions say in Step 1 that:</p>

<p>"During setup, it is important to note that you must use the same database for all of your instances."</p>

<p>Hrm. This sounds like it could cause troubles down the line. Later:</p>

<p>"Choose the newly-created site in the 'Current Homepage' column, and click the 'Set the current homepage' button. Now, when you visit your site's homepage, the page you just created will be displayed."</p>

<p>Anyone familiar with databases will realize there is a problem here. If the two or more sites are sharing a single database, changing the current homepage as in the instructions necessarily also changes it in the other!</p>

<p>Unless I was missing something quite obvious, this wouldn't work!</p>

<p>Now the primary developer for MM is an incredibly competent programmer so I assume he had some way around this. The instructions mention using the $conf variable in the settings.php file. Assumedly, since the current homepage is stored as a system variable in the variables table and $conf can be used to overwrite these values, it ought to be possible to use this somehow to redirect to a different homepage for each instance. First, I couldn't figure out how to get that working, and second I noticed some other problems that wouldn't be solved even if this worked.</p>

<h3>Other Problems With the Primary Multisite Method</h3>

<p>Since both instances share a single database, it impossible to set any settings on one that would not end up affecting the other. For example, changing the Site Name, E-mail address, Performance settings, and any other configuration setting on one site would change it the other! Unless there is a situation under which both sites have all of the same information and configuration, this setup would not work!</p>

<p>Sure, one could manually override $conf in the settings.php file in an attempt to account for some of these configuration changes, but it gets messy quickly.</p>

<p>Further, this method can only be used to override things in the variables table. It wouldn't be any help for other database entries.</p>

<p>Things broke down more when it came to the use of modules. One of my sites was reasonably complex, requiring the installation of many modules. The other was relatively simple and I desired to keep it as light as possible. However, it was not possible to do this when they shared a single database! Installing a module on one instance necessarily installed it on the other due to their sharing. This introduced unnecessary bloat to the site I desired to be lighter.</p>

<p>The instructions mention using different database prefixes for tables not used by Monster Menus. However, this gets tedious for multiple reasons:</p>

<h4>Reason 1: Installing Modules is a mess</h4>

<p>The tables will not be created until a module is installed. So the process for installing a module ends up something like the following:</p>

<ol>
<li>Create a separate database for the non-shared tables</li>
<li>Install the module on the shared database</li>
<li>Dump and import those tables (and their data) from the shared database to the separate database</li>
<li>Create prefix entries for the instance that is using those to point to the separate database for those tables from the instance that will be using the tables outside of the shared instance</li>
<li>Uninstall the module on the shared database, setting its state back to before the module was installed.</li>
</ol>


<p>Note, this would simply break if there was an update to a module that added or removed a table because it's prefix wouldn't be in the list of prefixes. The person responsible for performing the module updates would therefore have to read through the module code, search for database updates, and pre-emptively set their prefixes in the settings.php file. If this is missed, the tables will be created on the shared database and will not make any sense.</p>

<h4>Reason 2: Difficult for standard Drupal tables</h4>

<p>This is difficult for more standard Drupal tables such as system where the entire instance relies heavily on it being set a certain way. Once it gets copied, moved, changed, there is a high probability of things breaking.</p>

<p>So this created many issues.</p>

<h2>Finding a Workaround</h2>

<p>First, I spent time trying to find a way to workaround this and get things to play nicely. The standard <a href="http://drupal.org/node/1366320">instructions</a> say that it's possible to use different prefixes for tables not used by Monster Menus, but that they must share the same database and not have prefixes for Monster Menus specific tables.</p>

<p>So I could have manually created a separate database with separate tables and pointed my secondary instance at them. However, this would have the downside of requiring me to create any new table separately in another database as described above!</p>

<p>Put another way, this says that, by default, share all tables, only use different tables if we so specify.</p>

<p>The more I thought about this, the more it seemed backwards. I would much rather it default to using multiple, separate databases, with each instance using its own database tables, and only refer to the other instance's database for any Monster Menus related tables. This way I can install modules, change settings, etc. on each instance without affecting the other. I envisioned some variation of the following:</p>

<p><img class="center" src="/images/mm4.png"></p>

<h3>The Alternate Method for using Drupal Multisite with MM</h3>

<p>There is a very detailed post I made on drupal.org about how to do this. And I explain some of the background, but not in the kind of depth I have done in this post:</p>

<blockquote><p><a href="http://drupal.org/node/1471176">Multiple Drupal Sites with One MM Tree (alternate configuration)</a></p></blockquote>

<p>I won't repeat the steps here as that would be needlessly redundant. The magic there though is that the multiple instances default to using their own databases and use the prefixes in the settings.php file to point to a master for any requests for Monster Menus specific content such as the tree itself, permission groups, monster menus blocks, etc.</p>

<p>This alleviates all of the issues with not being able to have different per-instance configurations, of having a different module stack on each site, and all of the other problems that come with requiring all instances to share a single database instance.</p>

<h3>Fringe Benefits</h3>

<p>Aside from simply remedying the issues described above, this also has corollary benefits.</p>

<p> A major one is that it is now possible to have a single master and X slaves. In my actual setup, I had only one master and one slave. However, as in my diagram above, it's possible to have one master and two slaves. Or one master and fifty slaves. There is ultimately no limit.</p>

<p> And since they are all sharing the same Monster Menus permissions trees, this means Single Sign On is possible throughout the sites as a single user account is tied to permissions on multiple sites! It's possible to assign permission groups from any site to any other site that is linked in this fashion.</p>

<p>And configuration on any given site (aside from the Monster Menus configuration of course!) can be entirely separate and siloed off from the others. Now if an administrator on one site changes the contact email or creates a new WYSIWYG profile or installs (or uninstalls) a module or changes the input filters, it will not break any content or configuration on any of the other linked sites.</p>

<h2>Conclusion</h2>

<p><a href="http://drupal.org/project/monster_menus">Monster Menus</a> is is an amazing module. Having the capability, with some tweaks like this, to share its assets and ablilities across multiple sites is unbelievably powerful.</p>

<p>Special thanks to <a href="https://www.amherst.edu">Amherst College</a> for paving the way with this module!</p>
]]></content>
  </entry>
  
</feed>
