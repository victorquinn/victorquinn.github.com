<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drupal | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/drupal/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2013-01-10T11:58:02-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Inheritance - Ensure method in parent returns instance of child]]></title>
    <link href="http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child/"/>
    <updated>2013-01-09T11:55:00-05:00</updated>
    <id>http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child</id>
    <content type="html"><![CDATA[<p>I recently came up against a pretty interesting problem in PHP. Explaining the
problem will take up the majority of this post, the solution the minority.</p>

<p>If the title gives you enough info to know this is likely the solution to your
problem, <a href="#inheritance-solutions">click here to jump to the solutions.</a></p>

<h2>The Problem</h2>

<p>On a recent application I was building in PHP, I had a parent class with
children that inherited from it and overrode some methods of the parent.</p>

<p>I was building a queryable object, the idea of which was that I could chain
together query methods which could each pass through and filter the returned
dataset.</p>

<p>Problem being, in the parent I was returning instances of the parent class, so
if I chained 2 of these together, a method called on the second call would call
the parent's method, not the child's method (if it had overwritten the parent
method).</p>

<p>To make this a bit more concrete, I have concocted an example which is a
simplified version of the problem I needed to solve:</p>

<h2>Example</h2>

<h3>The parent class</h3>

<p>First, we have a filterable object class with some base methods:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;protected $items;</span>
</span><span class='line'>
</span><span class='line'><span class="x">function __construct($i) {</span>
</span><span class='line'><span class="x">    $this-&amp;gt;items = $i;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Limit how many items are returned</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to return</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function limit($n) {</span>
</span><span class='line'><span class="x">    return new Filterable(array_slice($this-&amp;gt;get(), 0, $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return new Filterable(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Return the $items as an array</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function get() {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;items;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So as you can see, a pretty simple class. It takes in an array of items and then
has methods to limit() or skip() a number of items in that list and a method to
get the resultant array back.</p>

<h3>Using the Parent Class</h3>

<p>To use this is pretty simple:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$items = array (1, 2, 3, 4, 5);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Instantiate a new instance of Filterable</span>
</span><span class='line'><span class="x">$filterable = new Filterable($items);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Now do some filtering&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array</span>
</span><span class='line'><span class="x">// of array(1, 2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// But we can also chain them&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array of</span>
</span><span class='line'><span class="x">// array(2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// To get the resulting array, we can use the get() function to pull out the</span>
</span><span class='line'><span class="x">// internal data. So the following returns the actual array</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1)-&gt;get();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So this is all well and good and works like a charm. Go ahead, try it, it'll
work as expected. So where does the problem arise?</p>

<h3>Enter a child</h3>

<p>So let's add a child class and override one of the methods. Let's say we want to
alter the limit() function so it limits by n*2 elements if n is passed to it. It
will inherit all of the attributes of the parent so there is no need to
redeclare any methods we are not overriding here. So __construct(), skip(), and
get() will work by using the parent's methods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class FilterableChild {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;/**</span>
</span><span class='line'><span class="x"> * Skip the first N*2 elements</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   Doubled, this is the number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return new FilterableChild(array_slice($this-&amp;gt;get(), $n*2));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Using this child</h3>

<p>Let's try using the child class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$items = array (1, 2, 3, 4, 5);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Instantiate a new instance of FilterableChild</span>
</span><span class='line'><span class="x">$filterable = new FilterableChild($items);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Now do some filtering&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable (note: not FilterableChild) with the</span>
</span><span class='line'><span class="x">// internal array (1, 2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(2);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type FilterableChild with the internal array (3, 4, 5)</span>
</span><span class='line'><span class="x">// as it as skipped the first n*2 elements as defined in the child class</span>
</span><span class='line'><span class="x">$filterable-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// But we can also chain them&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array of (2, 3, 4),</span>
</span><span class='line'><span class="x">// not (3, 4) as would be expected.</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Uh oh, but that's not what we wanted. We started off with a FilterableChild
object so we'd like to call the FilterableChild object's skip method, but we are
calling the parent's skip method here because limit() returned an object of type
Filterable, not FilterableChild, so when skip() is called, the parent object's
method is called rather than the child's.</p>

<p>But how to solve this? We surely do not want to update the parent to have
knowledge of the child, that breaks some of the Object Oriented nature of the
code.</p>

<p>In an ideal world we would do some kind of object introspection so the parent
class would return an object of whatever type was passed to it, but PHP doesn't
really have true introspection so this will not work either!</p>

<p>We could use the factory pattern, but then we'd be creating a bunch of
extraneous classes.</p>

<h2><a id="inheritance-solutions"></a> The Solutions</h2>

<p>I actually came up with 2 solutions to this problem, one before and another
while writing this article.</p>

<h3>First solution: Messy introspection</h3>

<p>We could use something like the following for each of our parent methods:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    $myClass = get_class($this);</span>
</span><span class='line'><span class="x">    return new $myClass(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This uses some kind of messy PHP introspection. There is no true object
introspection in PHP, so the best we can do is use the get_class() method which
returns a string which is the name of the class and then use that class to
return an object of the type of $this.</p>

<p>This would obviously work for the parent, but the magic is that it also works
for the child as even if the child does not implement a method (thereby falling
back to the parent's implementation) the parent will return an object of the
child's type. In other words, since $this for a child object would be
FilterableChild, even if the parent's skip() method is called, get_class($this);
would return "FilterableChild" so the parent, which has no knowledge of the
child is able to return an object of that child's class.</p>

<p>This could also be refactored to its own member function and called from within
any member methods to be a bit cleaner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;construct_instance_of(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    $class = get_class($this);</span>
</span><span class='line'><span class="x">    return new $class($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is appealing because the child class doesn't need to do any additional work
and it will work.</p>

<h3>Second Solution: Implement construct_instance_of() in child</h3>

<p>This solution is perhaps a bit cleaner because it doesn't deal with the ugliness
of getting the class name as a string and deaing with it, but requires any child
objects to override the construct_instance_of() method to return an object of
its type. Below I've got code for the parent and child object to make this work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Parent  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;construct_instance_of(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    return new Filterable($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Child  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class FilterableChild {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    return new FilterableChild($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since an object is created with its class, if we are always using
construct_instance_of() to return the object and it's implemented in all
children, the returned object will always have the child class even if the
method is called from the parent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Civic Drupal Module]]></title>
    <link href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"/>
    <updated>2012-10-26T16:28:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module</id>
    <content type="html"><![CDATA[<p>One of the nice things about working for a political company is the ability to work in a fast-moving field, especially close to election time.</p>

<p>Just a few weeks ago Google came out with a new API called <a href="https://developers.google.com/civic-information/">Civic</a> which allows you to pass in an address and get back a bunch of information related to voting in the upcoming election. It will return things such as polling places, candidates, and other election information.</p>

<p><img class="center" src="/images/google.png"></p>

<p>Our company took this to task and created a Drupal module which interacts with this new API service so people can easily add a "Find my polling place" widget to their Drupal website. This should hopefully get more people informed about the election and getting out to vote.</p>

<p>For my part, I took the Drupal 6 version created by my co-workers and ported it to Drupal 7. I also added (Drupal 7 only for now) some other cool info based on your address such as information on the relevant contests and links to the candidate pages so voters can be well informed going into election day.</p>

<p>Check it out!</p>

<p><a href="http://d7demo.ngpvanhost.com">Try out a demo</a></p>

<p><a href="http://drupal.org/project/google_civic">Module page on drupal.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Capybara and RSpec to test Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"/>
    <updated>2012-10-11T14:49:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>I created a git repo with a framework for testing Drupal sites using Capybara webkit and RSpec so any Drupal developers can just clone it and go.</p>

<p><a href="https://github.com/victorquinn/drupal-capybara">View project on Github</a></p>

<h2>Rationale</h2>

<p>The first question I'm likely to get here is "Why?" Drupal has its own testing framework <a href="http://drupal.org/simpletest">SimpleTest</a> which can be used for both Unit and Functional tests, so why try to use RSpec/Ruby? Also, SimpleTest has access to all of the Drupal-y goodness, why write functional tests in Ruby where those functions would not be available?</p>

<p>That's a great question. In my case I'm trying to run tests on a Drupal instance that is on a different machine. In my case I'm trying to run the tests from by desktop and hit my production web server which is on an offsite clustered server. Here SimpleTest wouldn't fit the bill. These tests allow me to take into account network latency and such.</p>

<p>Note, of course since these tests are not in Drupal, tests written and performed like this will not do the setup/teardown like SimpleTest. So I would strongly suggest only touching data on test websites.</p>

<h2>Setup</h2>

<p>First, test that ruby exists and is the right version.</p>

<p><code>bash
ruby -v
</code></p>

<p>I used ruby 1.9.3-p194 managed by <a href="https://rvm.io">rvm</a> but I believe any 1.9+ version of ruby should work here with Capybara.</p>

<p>Next, clone my repo which is basically a skeleton setup ready to test Drupal using Capybara. In the repo I've included a file called default.config.yaml. You will want to copy that file to config.yaml. The Gemfile should be set up to install all necessary dependencies.</p>

<p><code>bash
git clone git://github.com/victorquinn/drupal-capybara.git
cp default.config.yaml config.yaml
bundle install
</code></p>

<p>Now edit config.yaml and change the values to match the Drupal site you are testing.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: abcd1234
</code></p>

<h2>Is it working?</h2>

<p>I've included two sample tests, one which will just check to ensure the site can be hit and the second which should try logging in to your Drupal site using the values in config.yaml. I've tested this both on Drupal 6 and Drupal 7 and works out of the box on both.</p>

<p>Try to run the tests and ensure things work. Go to the root of that directory (drupal-capybara by default) and try to run it! (do not try to run this from inside the spec directory, you'll get errors.)</p>

<p><code>bash
rspec spec
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:45:18.027 webkit_server[73469:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>..</p>

<p>Finished in 4.23 seconds
2 examples, 0 failures
```
The warnings can be safely ignored. I am not sure exactly why they're there, something to do with the way the Capybara webkit code is with Mountain Lion. But it's just a warning and doesn't have anything to do with our web tests.</p>

<p>Note: The login test I included will only work if your system has not altered the login page. If something has changed the Log In button to say "Login" or "Go" or "Submit" or anything else, the test will fail. This is one of the downsides of trying to write tests for Drupal in a system that is not associated with Drupal -- it cannot dynamically know about anything which has changed internal to Drupal.</p>

<p>** Capybara webkit can be a bit of a tricky beast to get installed on your system with dependencies and such. <a href="#troubleshooting_webkit">Jump to the bottom</a> to see more details on some possible solutions.</p>

<p>Now test that tests fail correctly by changing your password in config.yaml to a bad value and run it again.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: notmypassword
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:42:51.760 webkit_server[72603:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>Failures:</p>

<p>  1) DrupalTest login works</p>

<pre><code> Failure/Error: verify_login_worked
   expected #has_content?("Sorry, unrecognized username or password.") to return false, got true
 # ./spec/drupal_test_helper.rb:10:in `verify_login_worked'
 # ./spec/drupal_capybara_spec.rb:27:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 3.46 seconds
2 examples, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/drupal_capybara_spec.rb:25 # DrupalTest login works
```</p>

<p>Here failure is a good thing! Shouldn't be able to log in if the password is wrong. Don't forget to change your password back in config.yaml before moving on.</p>

<p>This isn't a full rspec tutorial as such, but with my example tests that should be a good start. I've included a third sample test of filling out a Drupal form in my code (specifically in <em>spec/drupal_capybara_spec.rb</em>, but it's commented out by default because that's kind of specific to the particulars of the site and I didn't want to send this out with tests likely to fail on most systems.</p>

<p>I should note, you can also run RSpec to get a nice HTML output. Just run the following:</p>

<p>``` bash
rspec spec --format html --out results.html</p>

<h1>And if you're on a Mac, to open the results in a browser, just run:</h1>

<p>open results.html
```
<em>You should be all set and ready to write some tests!</em></p>

<h2><a id="troubleshooting_webkit"></a>Troubleshooting Capybara Webkit</h2>

<p>Not to sugar coat things, I found Capybara Webkit pretty painful to get installed.</p>

<p>I'll help with the issues I overcame, but generally it will likely involve some googling and such as it's very dependent on the particulars of the system on which this is being run. For reference, I am on Mountain Lion (10.8.2) using ruby 1.9.3-p194. I also use <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> to manage packages.</p>

<p>If you get the following error:</p>

<p>``` bash
Installing capybara-webkit (0.12.1) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>    /Users/&lt;username&gt;/.rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb
</code></pre>

<p>Gem files will remain installed in /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1 for inspection.
Results logged to /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1/./gem_make.out
An error occured while installing capybara-webkit (0.12.1), and Bundler cannot continue.
Make sure that <code>gem install capybara-webkit -v '0.12.1'</code> succeeds before bundling.
```
Then it's likely qt is not installed on your system. I resolved this by running:</p>

<p><code>bash
brew install qt libpng
</code></p>

<p>Mentioned above, but if you're on Mountain Lion you will likely see a warning such as:</p>

<p><code>bash
2012-10-11 18:16:42.457 webkit_server[64967:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</code></p>

<p>but it can safely be ignored.</p>

<p>If all else fails and you cannot get Webkit working on your system, Selenium can be used instead of Capybara Webkit so all this magic still works, just using Selenium instead of Webkit.</p>

<h3>Alternative setup with Selenium</h3>

<p>To use Selenium instead of headless Webkit, simply edit the drupal_capybara_spec.rb file as follows:</p>

<p>``` ruby</p>

<h1>Before</h1>

<p>Capybara.default_driver = :webkit
Capybara.javascript_driver = :webkit</p>

<h1>After</h1>

<p>Capybara.default_driver = :selenium
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating Fielded Nodes in Drupal 7]]></title>
    <link href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"/>
    <updated>2012-08-11T18:23:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>You've just created your new super awesome node type in Drupal 7 using the (now in core!) Content type editor.</p>

<p><img class="center" src="/images/contenttype1.png"></p>

<p>Now you want to programmatically generate some Super Awesome Content nodes. Some <a href="https://www.google.com">Googling</a> (or <a href="https://duckduckgo.com">Ducking</a>!) will land you with some snippets that look as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Works with standard node  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;blog&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Problem</h3>

<p>Since you've defined a custom content type, you may think something like the following would work great with your new custom node type to set your custom field values:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Attempt with custom node (this will fail!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field values</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, that will fail! Why? Because you can't set node custom fields like you may expect with <em>$node->{$key}</em>.</p>

<p><em>In my opinion, this is one thing Drupal 7 got very wrong. I'll explain their rationale in a bit after showing the correct way to do this and it does make some sense, but it seems unnecessarily complicated.</em></p>

<h3>The Solution</h3>

<p>Instead of trying to set those custom field attributes directly, you have to use the following funky syntax:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Successful attempt with custom node (this totally works!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Huh? What's with this <em>['und'][0]['value']</em> stuff?</p>

<p>Well, it's a bit complicated. Let's break it down piece by piece</p>

<h4>['und']</h4>

<p>This first bit is the language to be applied to the field. <em>'und'</em> is the key specifying that the language is undefined. This could also be 'en' or 'de' or 'fr' or any other 2 letter language code if a particular language is specified for this field.</p>

<h4>[0]</h4>

<p>This is an array index. For any single value fields like the ones we have, this is just [0]. But it's conceivable to have multiple values in which this would kind of make sense. For example, let's say our reasons_for_being_awesome field was a multi-value field:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Multi-value field  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][1][&#39;value&#39;] = &quot;Reason number 2&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][2][&#39;value&#39;] = &quot;Another reason&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][3][&#39;value&#39;] = &quot;The most important reason&quot;;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it makes some sense for the array index to be there, but it's somewhat confusing for what is arguably the main use case -- namely trying to assign a single value to a field.</p>

<h4>['value']</h4>

<p>This may be the oddest piece. There are a few other keys which could be specified here, among them <em>['format']</em> and <em>['summary']</em>, but when working programmatically with custom fields, it's rare to be setting anything other than <em>['value']</em>.</p>

<h3>Summary</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Summary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  // Won&#39;t work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Will work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Commentary</h3>

<p>I think Drupal should be much better here and dropped the ball for developers by not allowing the first method above to work. This ['und'][0]['value'] mess may make it easier for the system to deal with the input, but it makes things far more difficult/complicated for developers. This is an area where it's painfully clear that the Drupal Field API is not a true ORM like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and in my opinion that's a missed opportunity.</p>

<p>Ideally the system would be able to default to allowing things to be set with just the key and not require developers to specify the language, array index, and value key every single time a value is set to the field.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe Ubercart Module for Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal/"/>
    <updated>2012-03-16T16:46:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/16/stripe-ubercart-module-for-drupal</id>
    <content type="html"><![CDATA[<p>Back in October of last year, I wrote an Ubercart plugin for Stripe <sup><a href="#stripe1">[1]</a></sup>, a payment API created to be developer conscious and easy to use. I loved the idea of Stripe <sup><a href="#stripe2">[2]</a></sup> and was using Ubercart for a project and noticed there was no module so I created it.</p>

<p>It was the first contrib module I had created entirely from scratch on my own which made it through the Drupal.org submission process. I've written many custom modules for my employer and for side projects, but this was my first time going through the gauntlet of the review process for getting a contrib module on Drupal.org. For the curious, you can see the whole back and forth on this issue: <a href="http://drupal.org/node/1339850">http://drupal.org/node/1339850</a></p>

<p>I recently noticed Stripe links back to my module from their site.<sup><a href="#stripe3">[3]</a></sup></p>

<p><a id="stripe1"></a>[1] <a href="http://drupal.org/project/uc_stripe">Ubercart plugin for Stripe</a>
<a id="stripe2"></a>[2] <a href="https://stripe.com">Stripe</a>
<a id="stripe3"></a>[3] <a href="site.https://stripe.com/docs/libraries#third-party">Stripe link to my Ubercart Stripe Module</a></p>
]]></content>
  </entry>
  
</feed>
