<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2013-01-06T16:56:32-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cd which directory]]></title>
    <link href="http://victorquinn.com/blog/2012/10/15/cd-which-directory/"/>
    <updated>2012-10-15T10:04:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/15/cd-which-directory</id>
    <content type="html"><![CDATA[<p>Sharing a minor tweak which has been very useful to me.</p>

<p>I find I often want to cd into the directory where a program exists. Let's say I was trying to jump to the directory which contained <em>myawesomeprogram</em> but didn't know where it was. My old workflow was something like:</p>

<p>``` bash
which myawesomeprogram</p>

<h1>Manually click/drag to copy and paste the resulting output</h1>

<p>cd <pasted directory>
```</p>

<p>Come on, I'm an Ã¼bernerd, surely I can figure out something better/more efficient which doesn't require me to touch my mouse.</p>

<h2>Enter a simple zsh function</h2>

<p>I use <a href="http://zsh.sourceforge.net">zsh</a> for my shell. I think this should work with bash though YMMV.</p>

<p><code>bash
cdw () {
  cd $(dirname $(which $1))
}
</code></p>

<p>Adding this to my .zshrc allows me to just type</p>

<p><code>bash
cdw myawesomeprogram
</code>
and I'm immediately teleported to the folder which contains that program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Capybara and RSpec to test Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"/>
    <updated>2012-10-11T14:49:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>I created a git repo with a framework for testing Drupal sites using Capybara webkit and RSpec so any Drupal developers can just clone it and go.</p>

<p><a href="https://github.com/victorquinn/drupal-capybara">View project on Github</a></p>

<h2>Rationale</h2>

<p>The first question I'm likely to get here is "Why?" Drupal has its own testing framework <a href="http://drupal.org/simpletest">SimpleTest</a> which can be used for both Unit and Functional tests, so why try to use RSpec/Ruby? Also, SimpleTest has access to all of the Drupal-y goodness, why write functional tests in Ruby where those functions would not be available?</p>

<p>That's a great question. In my case I'm trying to run tests on a Drupal instance that is on a different machine. In my case I'm trying to run the tests from by desktop and hit my production web server which is on an offsite clustered server. Here SimpleTest wouldn't fit the bill. These tests allow me to take into account network latency and such.</p>

<p>Note, of course since these tests are not in Drupal, tests written and performed like this will not do the setup/teardown like SimpleTest. So I would strongly suggest only touching data on test websites.</p>

<h2>Setup</h2>

<p>First, test that ruby exists and is the right version.</p>

<p><code>bash
ruby -v
</code></p>

<p>I used ruby 1.9.3-p194 managed by <a href="https://rvm.io">rvm</a> but I believe any 1.9+ version of ruby should work here with Capybara.</p>

<p>Next, clone my repo which is basically a skeleton setup ready to test Drupal using Capybara. In the repo I've included a file called default.config.yaml. You will want to copy that file to config.yaml. The Gemfile should be set up to install all necessary dependencies.</p>

<p><code>bash
git clone git://github.com/victorquinn/drupal-capybara.git
cp default.config.yaml config.yaml
bundle install
</code></p>

<p>Now edit config.yaml and change the values to match the Drupal site you are testing.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: abcd1234
</code></p>

<h2>Is it working?</h2>

<p>I've included two sample tests, one which will just check to ensure the site can be hit and the second which should try logging in to your Drupal site using the values in config.yaml. I've tested this both on Drupal 6 and Drupal 7 and works out of the box on both.</p>

<p>Try to run the tests and ensure things work. Go to the root of that directory (drupal-capybara by default) and try to run it! (do not try to run this from inside the spec directory, you'll get errors.)</p>

<p><code>bash
rspec spec
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:45:18.027 webkit_server[73469:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>..</p>

<p>Finished in 4.23 seconds
2 examples, 0 failures
```
The warnings can be safely ignored. I am not sure exactly why they're there, something to do with the way the Capybara webkit code is with Mountain Lion. But it's just a warning and doesn't have anything to do with our web tests.</p>

<p>Note: The login test I included will only work if your system has not altered the login page. If something has changed the Log In button to say "Login" or "Go" or "Submit" or anything else, the test will fail. This is one of the downsides of trying to write tests for Drupal in a system that is not associated with Drupal -- it cannot dynamically know about anything which has changed internal to Drupal.</p>

<p>** Capybara webkit can be a bit of a tricky beast to get installed on your system with dependencies and such. <a href="#troubleshooting_webkit">Jump to the bottom</a> to see more details on some possible solutions.</p>

<p>Now test that tests fail correctly by changing your password in config.yaml to a bad value and run it again.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: notmypassword
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:42:51.760 webkit_server[72603:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>Failures:</p>

<p>  1) DrupalTest login works</p>

<pre><code> Failure/Error: verify_login_worked
   expected #has_content?("Sorry, unrecognized username or password.") to return false, got true
 # ./spec/drupal_test_helper.rb:10:in `verify_login_worked'
 # ./spec/drupal_capybara_spec.rb:27:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 3.46 seconds
2 examples, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/drupal_capybara_spec.rb:25 # DrupalTest login works
```</p>

<p>Here failure is a good thing! Shouldn't be able to log in if the password is wrong. Don't forget to change your password back in config.yaml before moving on.</p>

<p>This isn't a full rspec tutorial as such, but with my example tests that should be a good start. I've included a third sample test of filling out a Drupal form in my code (specifically in <em>spec/drupal_capybara_spec.rb</em>, but it's commented out by default because that's kind of specific to the particulars of the site and I didn't want to send this out with tests likely to fail on most systems.</p>

<p>I should note, you can also run RSpec to get a nice HTML output. Just run the following:</p>

<p>``` bash
rspec spec --format html --out results.html</p>

<h1>And if you're on a Mac, to open the results in a browser, just run:</h1>

<p>open results.html
```
<em>You should be all set and ready to write some tests!</em></p>

<h2><a id="troubleshooting_webkit"></a>Troubleshooting Capybara Webkit</h2>

<p>Not to sugar coat things, I found Capybara Webkit pretty painful to get installed.</p>

<p>I'll help with the issues I overcame, but generally it will likely involve some googling and such as it's very dependent on the particulars of the system on which this is being run. For reference, I am on Mountain Lion (10.8.2) using ruby 1.9.3-p194. I also use <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> to manage packages.</p>

<p>If you get the following error:</p>

<p>``` bash
Installing capybara-webkit (0.12.1) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>    /Users/&lt;username&gt;/.rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb
</code></pre>

<p>Gem files will remain installed in /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1 for inspection.
Results logged to /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1/./gem_make.out
An error occured while installing capybara-webkit (0.12.1), and Bundler cannot continue.
Make sure that <code>gem install capybara-webkit -v '0.12.1'</code> succeeds before bundling.
```
Then it's likely qt is not installed on your system. I resolved this by running:</p>

<p><code>bash
brew install qt libpng
</code></p>

<p>Mentioned above, but if you're on Mountain Lion you will likely see a warning such as:</p>

<p><code>bash
2012-10-11 18:16:42.457 webkit_server[64967:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</code></p>

<p>but it can safely be ignored.</p>

<p>If all else fails and you cannot get Webkit working on your system, Selenium can be used instead of Capybara Webkit so all this magic still works, just using Selenium instead of Webkit.</p>

<h3>Alternative setup with Selenium</h3>

<p>To use Selenium instead of headless Webkit, simply edit the drupal_capybara_spec.rb file as follows:</p>

<p>``` ruby</p>

<h1>Before</h1>

<p>Capybara.default_driver = :webkit
Capybara.javascript_driver = :webkit</p>

<h1>After</h1>

<p>Capybara.default_driver = :selenium
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Agile Sprints]]></title>
    <link href="http://victorquinn.com/blog/2012/10/08/naming-agile-sprints/"/>
    <updated>2012-10-08T21:32:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/08/naming-agile-sprints</id>
    <content type="html"><![CDATA[<p>This is a trivial post of sorts.</p>

<p>There are 52 weeks in the year. My company follows 2 week sprints for development using an <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile Development</a> process called <a href="http://en.wikipedia.org/wiki/Scrum_(development">Scrum</a>).</p>

<p>52 divided by 2 yields 26.</p>

<p>How many letters are in the alphabet? Oh right, 26.</p>

<p>So using the letters A-Z it is possible to represent each sprint uniquely by just a letter of the alphabet just like hurricanes or Ubuntu.</p>

<p>So let's make sprint planning, a generally dry and boring affair, interesting.</p>

<p>Since I began leading sprints in my role as team lead with my current employer, my team has planned each sprint using a letter of the alphabet. But not just a letter of the alphabet, we've used the first letter to represent some adjective and the second to represent a mythical god.</p>

<p>We have had such gems as Entropic <a href="http://en.wikipedia.org/wiki/Echo_(mythology)">Echo</a>, Fab <a href="http://en.wikipedia.org/wiki/Fortuna">Fortuna</a>, Hapless <a href="http://en.wikipedia.org/wiki/Lernaean_Hydra">Hydra</a>, Gravid <a href="http://en.wikipedia.org/wiki/Godhead">Godhead</a>, and we are currently nearing the end of Jovial <a href="http://en.wikipedia.org/wiki/Jah">Jah</a>.</p>

<p>I am hardly the first one to think of this, but it has done us well and adds some much needed jazz to an otherwise boring affair.</p>

<p>In the midst of one of the most tiresome aspects of development, the sprint planning, we begin a debate on which adjective/mythical being pair would best represent our current sprint. Excellent and enjoyable arguments ensue as each person argues that their adjective/god pair most closely resembles the sprint we have just planned. The monotony has been cut with an amusing nonsensical argument about how Entropic this sprint is or the etymology of God vs. Godhead vs. Gaia. What does it mean to be a God? Amusement rises from a once dry conversation as an excited debate ignites. Developers who were once dreary of the seemingly endless task of planning the coming weeks spring to life in an attempt to argue that their pairing of adjective and god is most apt.</p>

<p>And I've done so against resistance. I have been told that company policy forbade such a tactic, that tradition was to name the sprint by the (boring) start and end date and to diverge was verboten. I now technically name sprints by the start and end date, but tack on my team consensus amusing god name as a suffix. Since "Ardent Atlas" was forbidden, we now have "May 22 - June 5, Bashful Baal" to appease the powers that be while maintaining autonomy and team spirit.</p>

<p>The thing I love most about this is that there is no trickery here. This is not like the spoon zoomed toward the infant like it's an airplane while the spoon holder mockingly looks down upon the infant as, well, infantile. Rather this is just a moment to enjoy the company of other intellectuals and have a respectful debate about something downright silly and frankly nonsensical to mix things up. It is an excuse to forget about the nitty gritty details of the boring nature of what had just been planned and just wax philosophically and passionately about definitions and minutiae in a manner which few other sectors af the human race would appreciate as much as developers happen to.</p>

<p>Keeping developers happy is arguably the greatest challenge in the management of software engineers and this little trivial tidbit has added some nice spice to an otherwise boring dish.</p>
]]></content>
  </entry>
  
</feed>
