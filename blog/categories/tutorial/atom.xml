<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2013-01-06T18:29:36-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Capybara and RSpec to test Drupal]]></title>
    <link href="http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal/"/>
    <updated>2012-10-11T14:49:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/11/using-capybara-and-rspec-to-test-drupal</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>I created a git repo with a framework for testing Drupal sites using Capybara webkit and RSpec so any Drupal developers can just clone it and go.</p>

<p><a href="https://github.com/victorquinn/drupal-capybara">View project on Github</a></p>

<h2>Rationale</h2>

<p>The first question I'm likely to get here is "Why?" Drupal has its own testing framework <a href="http://drupal.org/simpletest">SimpleTest</a> which can be used for both Unit and Functional tests, so why try to use RSpec/Ruby? Also, SimpleTest has access to all of the Drupal-y goodness, why write functional tests in Ruby where those functions would not be available?</p>

<p>That's a great question. In my case I'm trying to run tests on a Drupal instance that is on a different machine. In my case I'm trying to run the tests from by desktop and hit my production web server which is on an offsite clustered server. Here SimpleTest wouldn't fit the bill. These tests allow me to take into account network latency and such.</p>

<p>Note, of course since these tests are not in Drupal, tests written and performed like this will not do the setup/teardown like SimpleTest. So I would strongly suggest only touching data on test websites.</p>

<h2>Setup</h2>

<p>First, test that ruby exists and is the right version.</p>

<p><code>bash
ruby -v
</code></p>

<p>I used ruby 1.9.3-p194 managed by <a href="https://rvm.io">rvm</a> but I believe any 1.9+ version of ruby should work here with Capybara.</p>

<p>Next, clone my repo which is basically a skeleton setup ready to test Drupal using Capybara. In the repo I've included a file called default.config.yaml. You will want to copy that file to config.yaml. The Gemfile should be set up to install all necessary dependencies.</p>

<p><code>bash
git clone git://github.com/victorquinn/drupal-capybara.git
cp default.config.yaml config.yaml
bundle install
</code></p>

<p>Now edit config.yaml and change the values to match the Drupal site you are testing.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: abcd1234
</code></p>

<h2>Is it working?</h2>

<p>I've included two sample tests, one which will just check to ensure the site can be hit and the second which should try logging in to your Drupal site using the values in config.yaml. I've tested this both on Drupal 6 and Drupal 7 and works out of the box on both.</p>

<p>Try to run the tests and ensure things work. Go to the root of that directory (drupal-capybara by default) and try to run it! (do not try to run this from inside the spec directory, you'll get errors.)</p>

<p><code>bash
rspec spec
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:45:18.027 webkit_server[73469:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>..</p>

<p>Finished in 4.23 seconds
2 examples, 0 failures
```
The warnings can be safely ignored. I am not sure exactly why they're there, something to do with the way the Capybara webkit code is with Mountain Lion. But it's just a warning and doesn't have anything to do with our web tests.</p>

<p>Note: The login test I included will only work if your system has not altered the login page. If something has changed the Log In button to say "Login" or "Go" or "Submit" or anything else, the test will fail. This is one of the downsides of trying to write tests for Drupal in a system that is not associated with Drupal -- it cannot dynamically know about anything which has changed internal to Drupal.</p>

<p>** Capybara webkit can be a bit of a tricky beast to get installed on your system with dependencies and such. <a href="#troubleshooting_webkit">Jump to the bottom</a> to see more details on some possible solutions.</p>

<p>Now test that tests fail correctly by changing your password in config.yaml to a bad value and run it again.</p>

<p><code>yaml
site: "http://mycoolwebsite.com"
user: myusername
password: notmypassword
</code></p>

<p>You should see something like the following:</p>

<p>``` bash
2012-10-12 11:42:51.760 webkit_server[72603:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.</p>

<p>Failures:</p>

<p>  1) DrupalTest login works</p>

<pre><code> Failure/Error: verify_login_worked
   expected #has_content?("Sorry, unrecognized username or password.") to return false, got true
 # ./spec/drupal_test_helper.rb:10:in `verify_login_worked'
 # ./spec/drupal_capybara_spec.rb:27:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 3.46 seconds
2 examples, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/drupal_capybara_spec.rb:25 # DrupalTest login works
```</p>

<p>Here failure is a good thing! Shouldn't be able to log in if the password is wrong. Don't forget to change your password back in config.yaml before moving on.</p>

<p>This isn't a full rspec tutorial as such, but with my example tests that should be a good start. I've included a third sample test of filling out a Drupal form in my code (specifically in <em>spec/drupal_capybara_spec.rb</em>, but it's commented out by default because that's kind of specific to the particulars of the site and I didn't want to send this out with tests likely to fail on most systems.</p>

<p>I should note, you can also run RSpec to get a nice HTML output. Just run the following:</p>

<p>``` bash
rspec spec --format html --out results.html</p>

<h1>And if you're on a Mac, to open the results in a browser, just run:</h1>

<p>open results.html
```
<em>You should be all set and ready to write some tests!</em></p>

<h2><a id="troubleshooting_webkit"></a>Troubleshooting Capybara Webkit</h2>

<p>Not to sugar coat things, I found Capybara Webkit pretty painful to get installed.</p>

<p>I'll help with the issues I overcame, but generally it will likely involve some googling and such as it's very dependent on the particulars of the system on which this is being run. For reference, I am on Mountain Lion (10.8.2) using ruby 1.9.3-p194. I also use <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> to manage packages.</p>

<p>If you get the following error:</p>

<p>``` bash
Installing capybara-webkit (0.12.1) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>    /Users/&lt;username&gt;/.rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb
</code></pre>

<p>Gem files will remain installed in /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1 for inspection.
Results logged to /Users/<username>/.rvm/gems/ruby-1.9.3-p194/gems/capybara-webkit-0.12.1/./gem_make.out
An error occured while installing capybara-webkit (0.12.1), and Bundler cannot continue.
Make sure that <code>gem install capybara-webkit -v '0.12.1'</code> succeeds before bundling.
```
Then it's likely qt is not installed on your system. I resolved this by running:</p>

<p><code>bash
brew install qt libpng
</code></p>

<p>Mentioned above, but if you're on Mountain Lion you will likely see a warning such as:</p>

<p><code>bash
2012-10-11 18:16:42.457 webkit_server[64967:707] *** WARNING: Method userSpaceScaleFactor in class NSView is deprecated on 10.7 and later. It should not be used in new applications. Use convertRectToBacking: instead.
</code></p>

<p>but it can safely be ignored.</p>

<p>If all else fails and you cannot get Webkit working on your system, Selenium can be used instead of Capybara Webkit so all this magic still works, just using Selenium instead of Webkit.</p>

<h3>Alternative setup with Selenium</h3>

<p>To use Selenium instead of headless Webkit, simply edit the drupal_capybara_spec.rb file as follows:</p>

<p>``` ruby</p>

<h1>Before</h1>

<p>Capybara.default_driver = :webkit
Capybara.javascript_driver = :webkit</p>

<h1>After</h1>

<p>Capybara.default_driver = :selenium
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating Fielded Nodes in Drupal 7]]></title>
    <link href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"/>
    <updated>2012-08-11T18:23:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>You've just created your new super awesome node type in Drupal 7 using the (now in core!) Content type editor.</p>

<p><img class="center" src="/images/contenttype1.png"></p>

<p>Now you want to programmatically generate some Super Awesome Content nodes. Some <a href="https://www.google.com">Googling</a> (or <a href="https://duckduckgo.com">Ducking</a>!) will land you with some snippets that look as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Works with standard node  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;blog&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Problem</h3>

<p>Since you've defined a custom content type, you may think something like the following would work great with your new custom node type to set your custom field values:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Attempt with custom node (this will fail!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field values</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, that will fail! Why? Because you can't set node custom fields like you may expect with <em>$node->{$key}</em>.</p>

<p><em>In my opinion, this is one thing Drupal 7 got very wrong. I'll explain their rationale in a bit after showing the correct way to do this and it does make some sense, but it seems unnecessarily complicated.</em></p>

<h3>The Solution</h3>

<p>Instead of trying to set those custom field attributes directly, you have to use the following funky syntax:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Successful attempt with custom node (this totally works!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Huh? What's with this <em>['und'][0]['value']</em> stuff?</p>

<p>Well, it's a bit complicated. Let's break it down piece by piece</p>

<h4>['und']</h4>

<p>This first bit is the language to be applied to the field. <em>'und'</em> is the key specifying that the language is undefined. This could also be 'en' or 'de' or 'fr' or any other 2 letter language code if a particular language is specified for this field.</p>

<h4>[0]</h4>

<p>This is an array index. For any single value fields like the ones we have, this is just [0]. But it's conceivable to have multiple values in which this would kind of make sense. For example, let's say our reasons_for_being_awesome field was a multi-value field:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Multi-value field  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][1][&#39;value&#39;] = &quot;Reason number 2&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][2][&#39;value&#39;] = &quot;Another reason&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][3][&#39;value&#39;] = &quot;The most important reason&quot;;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it makes some sense for the array index to be there, but it's somewhat confusing for what is arguably the main use case -- namely trying to assign a single value to a field.</p>

<h4>['value']</h4>

<p>This may be the oddest piece. There are a few other keys which could be specified here, among them <em>['format']</em> and <em>['summary']</em>, but when working programmatically with custom fields, it's rare to be setting anything other than <em>['value']</em>.</p>

<h3>Summary</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Summary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  // Won&#39;t work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Will work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Commentary</h3>

<p>I think Drupal should be much better here and dropped the ball for developers by not allowing the first method above to work. This ['und'][0]['value'] mess may make it easier for the system to deal with the input, but it makes things far more difficult/complicated for developers. This is an area where it's painfully clear that the Drupal Field API is not a true ORM like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and in my opinion that's a missed opportunity.</p>

<p>Ideally the system would be able to default to allowing things to be set with just the key and not require developers to specify the language, array index, and value key every single time a value is set to the field.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solved: git svn broken in Mountain Lion DP2]]></title>
    <link href="http://victorquinn.com/blog/2012/03/20/solved-git-svn-broken-in-mountain-lion-dp2/"/>
    <updated>2012-03-20T22:08:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/20/solved-git-svn-broken-in-mountain-lion-dp2</id>
    <content type="html"><![CDATA[<p>Over this past weekend, I installed Mountain Lion Developer Preview 2 (DP2).</p>

<p>It came with another version of Xcode and I was heartbroken to once again see that git svn was broken!</p>

<p>However, I was relieved to find that my <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">previous solution</a> worked like a charm. I was able to copy-paste the exact commands again and everything worked perfectly.</p>

<p>I updated the former post accordingly and it's available <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solved: git svn broken in Mountain Lion]]></title>
    <link href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/"/>
    <updated>2012-02-19T12:20:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion</id>
    <content type="html"><![CDATA[<p>On Thursday, February 16 2012, Apple released the first beta of OS X 10.8 named <a href="http://www.apple.com/macosx/mountain-lion/">Mountain Lion</a> to Developers. I will refrain from discussing anything about the upcoming release for fear of violating Apple's NDA, but I did come across one problem that interfered with my workflow which I solved and the disclosure that solution will not violate the NDA.</p>

<p>I use <a href="http://git-scm.com/">git</a> to connect to my employer's <a href="http://subversion.apache.org/">subversion</a> server. I was using a package called git-svn which includes connectors between the two systems. Upon upgrading to the Mountain Lion beta, my <em>git svn</em> commands stopped working. The solution follows.</p>

<h3>Install Xcode</h3>

<p>First, install the latest version of Xcode (version 4.4) for Mountain Lion. An interesting note is that in Mountain Lion, Apple decided to move it from its former home in <em>/Developer/Xcode</em> to <em>/Applications/Xcode</em>. This was the root source of many of the issues as many of the utilities were searching in the wrong place for the appropriate binaries.</p>

<h3>Install Xcode Command Line Tools</h3>

<p>Another change they've made is that the command line tools are no longer installed by default. Previously, they were included with Xcode with no additional installation necessary. To install the command line tools, launch Xcode, open the Preferences, and switch to the Downloads tab:</p>

<p><img class="center" src="http://victorquinn.com/images/xcodepreferences.png"></p>

<p>One of the entries there is <em>Command Line Tools</em>. Mine already says <em>Installed</em> as I've already installed it, but if you haven't, it'll appear as an <em>Install</em> button as the iOS 4.0 and 3.0 Device Debugging Support entries do in my screenshot above.</p>

<h3>Link the svn Libraries</h3>

<p>After this, you may be tempted to run a <em>git svn</em> command and see what happens. I received the following output:</p>

<p><code>bash Can't locate error
$ git svn rebase
Can't locate SVN/Core.pm in @INC (@INC contains: /usr/local/Cellar/git/1.7.9.1/lib /Library/Perl/5.12/darwin-thread-multi-2level /Library/Perl/5.12 /Network/Library
/Perl/5.12/darwin-thread-multi-2level /Network/Library/Perl/5.12 /Library/Perl/Updates/5.12.4 /System/Library/Perl/5.12/darwin-thread-multi-2level /System/Library/P
erl/5.12 /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level /System/Library/Perl/Extras/5.12 .) at /usr/local/Cellar/git/1.7.9.1/libexec/git-core/git-svn l
ine 41.
</code></p>

<p>The problem here is that the <em>git svn</em> command requires Perl libraries that aren't linked in Mountain Lion. <sup><a href="#gitsvn1">[1]</a></sup> So, we'll have to manually link them. Run the following in your terminal to link the library:</p>

<p>``` bash Link the second library
$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.12/darwin-thread-multi-2level/SVN /System/Library/Perl/Extras/5.12/SVN</p>

<p>```</p>

<p>Now when you run <em>git svn rebase</em> you will likely be presented with a different error. This is good because it indicates progress! But obviously poor because it's not working.</p>

<p><code>bash Can't locate error
$ git svn rebase
Can't locate loadable object for module SVN::_Core in @INC (@INC contains: /usr/local/Cellar/git/1.7.9.1/lib /Library/Perl/5.12/darwin-thread-multi-2level /Library/
Perl/5.12 /Network/Library/Perl/5.12/darwin-thread-multi-2level /Network/Library/Perl/5.12 /Library/Perl/Updates/5.12.4 /System/Library/Perl/5.12/darwin-thread-mult
i-2level /System/Library/Perl/5.12 /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level /System/Library/Perl/Extras/5.12 .) at /System/Library/Perl/Extras/5.
12/SVN/Base.pm line 59
BEGIN failed--compilation aborted at /System/Library/Perl/Extras/5.12/SVN/Core.pm line 5.
Compilation failed in require at /usr/local/Cellar/git/1.7.9.1/libexec/git-core/git-svn line 41.
</code></p>

<p>So now it appears it <em>can</em> find the Subversion core, but cannot find some other libraries it requires. Issue the following command to remedy this:</p>

<p><code>bash Link the second library
$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.12/darwin-thread-multi-2level/auto/SVN/ /System/Library/Perl/Extras/5.12/auto/SVN
</code>
By doing this, we've now linked all of the Subversion Perl directories necessary for this command to run correctly.</p>

<p><em>Update - March 19</em>
<em>I installed Mountain Lion DP2 over the weekend which broke this again. However, my exact instructions still applied and fixed the issue. I simply needed to install the latest version of Xcode 4.4 (available from <a href="http://developer.apple.com/devcenter/mac">developer.apple.com</a>) and then run the commands listed above.</em></p>

<ol>
<li><a id="gitsvn1"></a> Note, I am using the version of git from <a href="http://mxcl.github.com/homebrew/">Homebrew</a>. Your outcome may differ slightly if you are using a different version or not using Homebrew.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux Tutorial]]></title>
    <link href="http://victorquinn.com/blog/2011/06/20/tmux/"/>
    <updated>2011-06-20T00:00:00-04:00</updated>
    <id>http://victorquinn.com/blog/2011/06/20/tmux</id>
    <content type="html"><![CDATA[<h2>Why a terminal window manager?</h2>




<p>As a web developer, most of my time is spent in a command prompt banging away at web code. One of the greatest discoveries I have made to my productivity is the use of <a href="http://www.gnu.org/software/screen/">GNU Screen</a>. It&rsquo;s hard to distill the many benefits of this type of program into a few bullet points, so here is my best shot:</p>




<ul>
<li>Ability to quickly switch between multiple command prompts or editor windows.</li>
<li>Persistence, so if the connection is lost between client and server, server maintains the state it was in exactly prior to disconnection. This also means you can just close your terminal window, reopen it, reattach, and everything is just as you left it.</li>
<li>Ability to copy-paste and perform other operations across command prompts or editor windows without the use of the mouse.</li>
<li>Visual alerts to things happening in other &ldquo;windows&rdquo; not in the foreground.</li>
</ul>




<p>Some quick Googling will provide a more exhaustive list, but these are my main favorites. For anyone curious, here is my <a href="https://github.com/victorquinn/dotfiles/blob/master/.screenrc">.screenrc file on GitHub</a></p>




<p>But GNU Screen is just one of many programs that accomplish the same task.</p>




<h2>Why try tmux when I&rsquo;m a happy GNU Screen user?</h2>




<p>I&rsquo;ve been a happy GNU Screen user for about 2.5 years, but I am always looking for ways to improve my development process. I came across an article linked on <a href="http://news.ycombinator.com">HackerNews</a> discussing <a href="http://www.techrepublic.com/blog/opensource/is-tmux-the-gnu-screen-killer/1901">tmux as a GNU Screen Killer</a>. I&rsquo;m not a fan of such a sensationalist title, but I thought it was worth evaluating.</p>




<p>I figured I would also document my experience here because I often find a lack of beginner documentation for many *nix based command line utilities. Most hardcore nerds just reply, &ldquo;Just read the man pages n00b!&rdquo; which I find to be disappointing as a first-time user. If I spend my first hour using some new technology just trying to get it set up and learn the ropes, I am liable to simply give up on it and decide it&rsquo;s not worth my time &ndash; and I am a persistent bugger. If I can help one new user get up to speed a bit faster, using my first-time experiences as a stepping stone, mission accomplished.</p>




<h2>Installation</h2>




<p>My primary development machine is a Mac, and I use the fantastic <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> as my package manager of choice. (Highly recommended over MacPorts!) This makes my installation very easy:</p>




<div class="CodeRay">
  <div class="code"><pre>brew install tmux</pre></div>
</div>




<p>And that&rsquo;s it! Typing tmux in the command line launches it.</p>




<h2>Initial Configuration</h2>




<p>My first step was to get my initial configuration all set up. To do so, I first create a file called .tmux.conf in my home directory:</p>




<div class="CodeRay">
  <div class="code"><pre>touch ~/.tmux.conf</pre></div>
</div>




<p>Now, I jump in with my favorite editor (go emacs!) and set up a few basics. Through some experimentation and playing, I got my initial file set up which I&rsquo;ll paste here then explain:</p>




<div class="CodeRay">
  <div class="code"><pre>set -g status on
set -g status-keys emacs

set -g history-limit 1000000

set -g prefix C-t

set -g status-bg green
setw -g window-status-current-bg cyan
setw -g window-status-current-attr bold

set -g status-right '#7H | %F %s'

bind-key C-t last-window

setw -g monitor-activity on
set -g visual-activity on</pre></div>
</div>




<p>The first couple lines turn the status bar on and set my keybindings to emacs. There are also vi keybindings. The status bar is one of the main benefits of using tmux. In GNU Screen, it was quite a task to get the status bar working. Below I&rsquo;ve pasted the .screenrc configuration line to get the status bar working:</p>




<div class="CodeRay">
  <div class="code"><pre>hardstatus string '%{= kG}[ %{G}%H %{g}[%{=kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%= %{g}][%{B}%Y-%m-%d %{W}%c %{g}]'</pre></div>
</div>




<p>God help me if I ever had to change anything there! I can barely decipher what it&rsquo;s doing! So, with tmux, just turning it on was much simpler. I think it may default to on, but I wanted to ensure it is always on.</p>




<p>The history-limit line sets the history limit very high so tmux remembers everything I have done. The &ldquo;set -g prefix C-t&rdquo; changes the keybinding to have Control-t be the keyboard command for all of tmux&rsquo;s commands. This had been my keybinding in GNU Screen and I liked it because it didn&rsquo;t conflict with anything I use in emacs (I rarely use the transpose function). The default GNU Screen C-a conflicted with the jump-to-beginning-of-line command in emacs which I had frequently used. The default in tmux is C-b. More on this prefix command below.</p>




<p>The next 3 lines set the colors. I want the background of the status bar to be green and the currently active one to be cyan so it stands out.</p>




<p>The status-right command sets some attributes for the status bar. I found it a bit difficult to get a straightforward enumeration of what all possibilities were, but the <em>#7H</em> shows the name of the machine I am using, the <em>%F</em> is the date in the form Y-M-D, and the <em>%s</em> puts the unix time, which is seconds since 1970. This is always useful for database and other things which use that. There are many other things which could be added to this status bar, but these are a few I found useful.</p>




<p>The last-window line makes it so when I just type C-t C-t twice, it jumps to the last window I was using for easy switching and the last 2 lines set visual activity on so when something happens in a window other than my current one, I get a visual notification.</p>




<p>There are many more things that could go in a configuration file, but this gets me set up and going quickly and easily with my familiar keybindings.</p>




<h2>Assorted tips</h2>




<h3>Naming the session</h3>




<p>First, you can just start tmux by typing the command and hitting enter:</p>




<div class="CodeRay">
  <div class="code"><pre>tmux</pre></div>
</div>




<p>But then your session has no name. This is ok, but it makes it more difficult to reattach later. To start a session with a name, start it with the following command:</p>




<div class="CodeRay">
  <div class="code"><pre>tmux new-session -s {session-name}</pre></div>
</div>




<p>Where {session-name} is the name you want to give to your session. Then, to reattach it later, if you disconnect from the server running tmux or just decide to detach it for any other reason, just run:</p>




<div class="CodeRay">
  <div class="code"><pre>tmux attach-session -t {session-name}</pre></div>
</div>




<p>To attach the session which was previously open. Try it. Open a terminal window, run <em>tmux new-session -s test</em>, type some stuff into the command prompt, then close the terminal window. Don&rsquo;t worry, it&rsquo;s not gone. Open up another terminal window and run <em>tmux attach-session -t test</em> and you&rsquo;ll be back up and running with your commands still entered.</p>




<h3>Prefix command, typing commands</h3>




<p>Above, I rebound my prefix to C-t. The default in tmux is C-b. This means you type it and, regardless of what program or window you are in, anything that follows is a global command to tmux, superseding the underlying window. This is why I chose C-t, because C-b is frequently used by me in emacs and I didn&rsquo;t want to change it. If you look at the <a href="http://man.cx/tmux">man page for tmux</a>, you can see a full list of commands. They all assume the prefix command has come first. This confused me a bit at first because I thought those were all commands I could type from tmux, but they all needed the prefix command first, then the command. Note, from here on out, I&rsquo;ll use C-b to denote the prefix command because it&rsquo;s the default and likely more useful to most people than my C-t rebinding.</p>




<p>So to use any of those keybindings from the man page, type your prefix command (C-b) then the key. For example, when it says <em>t &ndash; Show the time.</em> it actually means &ldquo;C-b, t&rdquo; which is typing Control-b (or your rebound prefix key) then the t key.</p>




<p>On that same man page, further down, there are a bunch of word commands such as <em>source-file</em> and <em>list-commands</em>. These can be bound to keys, but they can also be called ad-hoc. This is like M-x in emacs or vi&rsquo;s :. Simply type your prefix command such as C-b, then type a colon (:) and, where the status bar was, these arbitrary commands can now be typed. For example:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, :, list-commands</pre></div>
</div>




<p>Will show you all of the available commands. These arbitrary commands can also be bound by adding the following to the .tmux.conf file:</p>




<div class="CodeRay">
  <div class="code"><pre>bind-key C-l list-commands</pre></div>
</div>




<p>This will bind C-l to the <em>list-commands</em> command. So, typing your prefix key (C-b) then that (C-l) will launch the list of commands without the need to type it out. (this command, by default, is already bound to ? so this is a bit of an unnecessary example)</p>




<h3>Detaching the session</h3>




<p>In the subsection above about attaching a session, I suggested that you close your terminal window to detach the session. That is however unnecessary. It is easy to just detach a session from within tmux without closing the terminal window by typing:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, d</pre></div>
</div>




<p>d for Detach.</p>




<h3>Creating, removing windows</h3>




<p>So you&rsquo;ve started tmux, but you only have a single window. Much of the discussion above assumes multiple active windows. To create a new window, just type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, c</pre></div>
</div>




<p>c for create. A new window is created and currently active. Look at the status bar and there is now a new numbered window. There is no (reasonable) limit to the number of windows created. Now, to kill the currently selected one, just type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, &amp;</pre></div>
</div>




<p>Then confirm.</p>




<h3>Moving between windows</h3>




<h4>Select Window by Number</h4>




<p>There are many ways to jump between currently active windows. The first is just to type the prefix command, C-b, then a number. This will jump to the selected window. For example, <em>C-b, 1</em> jumps to window 1, <em>C-b, 0</em> jumps to window 0.</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, {number}</pre></div>
</div>




<h4>Last Selected Window</h4>




<p>To jump to the last selected window:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, l</pre></div>
</div>




<p>That&rsquo;s l as in lion. In my configuration, I rebound it to my prefix command so I just type my prefix twice. This is my most frequently used command, so I gave it the easiest shortcut.</p>




<h4>Next, previous</h4>




<p>The commands:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, n
C-b, p</pre></div>
</div>




<p>n for next, p for previous. Jump between the next and previous windows respectively. It wraps so if the last window is currently selected and the next command is issued, it will jump to the first window.</p>




<h4>List of windows</h4>




<p>It is also possible to get a list of all windows and choose between them:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, w</pre></div>
</div>




<p>w for windows. This is great if there are many windows opened. The status bar can only show so many titles, so this view is often useful if titles are long or there are many open windows.</p>




<h4>Find text</h4>




<p>This is one of my favorite features in tmux that I have discovered. This command actually allows for finding text in a given window and switching to that window. If multiple windows contain that text, a dialog is displayed for choosing the window.</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, f, {search string}</pre></div>
</div>




<p>f for find. Any search string can be entered and tmux will search each of the windows for the appearance of that string and jump to the window that contains that string.</p>




<h3>Windows vs. Panes</h3>




<p>In tmux, there is a distinction made between windows and panes. Windows are what appear along the bottom status bar. However, there is also talk of panes in the man file. So is a pane different from a window one may wonder?</p>




<p>Yes. The difference however is quite simple. Each thing along the status bar is a window. Each window consists of one or more panes, just like a real physical window. By default, it is a single pane, but it could have more. One of the strong benefits of tmux is the ability to split a window into multiple panes and work with each of them. More detailed discussion on panes below. Killing a pane kills just that pane and does not kill the window unless it is the last remaining pane in that window.</p>




<h3><em>q</em> dismisses tmux dialogs</h3>




<p>If you want to see a list of commands available to you, type <em>C-b, :, list-commands</em> and hit enter. To make that list disappear and go back to where you were, just hit the <em>q</em> key. This use of the <em>q</em> key to jump out of any tmux dialog is consistent, so it also works for any other commands. To try another, type <em>C-b, t</em> to view the current time. Typing <em>q</em> closes the time.</p>




<h3>Reloading the configuration without leaving the session.</h3>




<p>When I first tried using tmux and getting my configuration set up, I was entering it using <em>tmux</em>, seeing how it looked, quitting it with the exit command, editing the configuration file, then relaunching it. I thought, &ldquo;there has got to be a better way, like <a href="http://man.cx/source">source</a> for tmux&rdquo; There is. Just run:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, :, source-file, ~/.tmux.conf</pre></div>
</div>




<p>And the configuration is reloaded in place! Now there is no reason to leave tmux to reload it.</p>




<h3>Copy-paste buffer</h3>




<p>One of the things I always found a bit kludgy was the way GNU Screen dealt with copy-past between buffers. I have a cheat sheet taped to my monitor for just this. In tmux, things seem a bit more straightforward and more powerful as tmux maintains a buffer so you can copy multiple things and access each thing you copied later! So you can copy Thing A, Thing B, Thing C, then go paste Thing B, Thing A, Thing C if you want. Very cool.</p>




<p>So, to jump into copy mode, type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, [</pre></div>
</div>




<p>You&rsquo;ll see now you can move your cursor up and down the current window using your keybindings of choice (for emacs, it&rsquo;s C-p for previous line, C-n for next line, M-v for page up, C-v for page down). When you get the cursor to where you want to start copying, hit the space bar to start the selection. Then move to the end of what you want to copy and use the command to wipe in emacs (C-w) and the text is copied! Now is where the magic starts. To paste the last thing copied, just type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, ]</pre></div>
</div>




<p>But, to get to the whole buffer of what has previously been copied, type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, =</pre></div>
</div>




<p>The copy buffer is now displayed. Just highlight the thing to be pasted and hit enter to paste it. As with any dialog in tmux, <em>q</em> will also just dismiss the dialog.</p>




<h3>Split window into panes</h3>




<p>So, you want to split your window to have an editor in the top and a command prompt in the bottom. No problem with tmux!</p>




<p>In any window, just type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, &quot;</pre></div>
</div>




<p>That&rsquo;s a double-quote and it&rsquo;ll split that window into 2 panes! Now, to move the cursor between the panes:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, o</pre></div>
</div>




<p>To kill a pane, just type:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, x</pre></div>
</div>




<p>It&rsquo;s easy to open an editor in one and use the other like a terminal. There are many advanced features in tmux for getting the panes specifically configured a certain way, but that would merit its own treatment entirely. My favorite little trick though is to create a few panes and use:</p>




<div class="CodeRay">
  <div class="code"><pre>C-b, space</pre></div>
</div>




<p>This jumps through a set of default pane configurations, one of which almost always suits my needs.</p>




<h2>Conclusion</h2>




<p>This is just the tip of the iceberg, there are many other features in tmux, but at the start, I see a lot I like. It seems a lot like the next generation of GNU Screen which, sadly, has been mostly stagnant for many years. tmux gets a lot of things right like the configuration, the status bar and its use of panes. All of these things, while technically possible in GNU Screen, require a PhD in GNU Screen configuration, a task for which mere mortals are unequipped. I&rsquo;ll keep using tmux for awhile to see how it goes, but it already has all the functionality of GNU Screen with basically the same keybindings (with a bit of conf file tweaking) and it has many additional features without dropping anything I use from the feature set of GNU Screen.</p>




<p>Thus far, I have to give tmux a big thumbs up!</p>

]]></content>
  </entry>
  
</feed>
