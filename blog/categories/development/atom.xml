<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2013-01-10T11:58:02-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP Inheritance - Ensure method in parent returns instance of child]]></title>
    <link href="http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child/"/>
    <updated>2013-01-09T11:55:00-05:00</updated>
    <id>http://victorquinn.com/blog/2013/01/09/php-inheritance-ensure-method-in-parent-returns-instance-of-child</id>
    <content type="html"><![CDATA[<p>I recently came up against a pretty interesting problem in PHP. Explaining the
problem will take up the majority of this post, the solution the minority.</p>

<p>If the title gives you enough info to know this is likely the solution to your
problem, <a href="#inheritance-solutions">click here to jump to the solutions.</a></p>

<h2>The Problem</h2>

<p>On a recent application I was building in PHP, I had a parent class with
children that inherited from it and overrode some methods of the parent.</p>

<p>I was building a queryable object, the idea of which was that I could chain
together query methods which could each pass through and filter the returned
dataset.</p>

<p>Problem being, in the parent I was returning instances of the parent class, so
if I chained 2 of these together, a method called on the second call would call
the parent's method, not the child's method (if it had overwritten the parent
method).</p>

<p>To make this a bit more concrete, I have concocted an example which is a
simplified version of the problem I needed to solve:</p>

<h2>Example</h2>

<h3>The parent class</h3>

<p>First, we have a filterable object class with some base methods:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;protected $items;</span>
</span><span class='line'>
</span><span class='line'><span class="x">function __construct($i) {</span>
</span><span class='line'><span class="x">    $this-&amp;gt;items = $i;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Limit how many items are returned</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to return</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function limit($n) {</span>
</span><span class='line'><span class="x">    return new Filterable(array_slice($this-&amp;gt;get(), 0, $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return new Filterable(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Return the $items as an array</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function get() {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;items;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So as you can see, a pretty simple class. It takes in an array of items and then
has methods to limit() or skip() a number of items in that list and a method to
get the resultant array back.</p>

<h3>Using the Parent Class</h3>

<p>To use this is pretty simple:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Parent Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$items = array (1, 2, 3, 4, 5);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Instantiate a new instance of Filterable</span>
</span><span class='line'><span class="x">$filterable = new Filterable($items);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Now do some filtering&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array</span>
</span><span class='line'><span class="x">// of array(1, 2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// But we can also chain them&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array of</span>
</span><span class='line'><span class="x">// array(2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// To get the resulting array, we can use the get() function to pull out the</span>
</span><span class='line'><span class="x">// internal data. So the following returns the actual array</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1)-&gt;get();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So this is all well and good and works like a charm. Go ahead, try it, it'll
work as expected. So where does the problem arise?</p>

<h3>Enter a child</h3>

<p>So let's add a child class and override one of the methods. Let's say we want to
alter the limit() function so it limits by n*2 elements if n is passed to it. It
will inherit all of the attributes of the parent so there is no need to
redeclare any methods we are not overriding here. So __construct(), skip(), and
get() will work by using the parent's methods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class FilterableChild {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;/**</span>
</span><span class='line'><span class="x"> * Skip the first N*2 elements</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   Doubled, this is the number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return new FilterableChild(array_slice($this-&amp;gt;get(), $n*2));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Using this child</h3>

<p>Let's try using the child class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$items = array (1, 2, 3, 4, 5);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Instantiate a new instance of FilterableChild</span>
</span><span class='line'><span class="x">$filterable = new FilterableChild($items);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Now do some filtering&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable (note: not FilterableChild) with the</span>
</span><span class='line'><span class="x">// internal array (1, 2, 3, 4)</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(2);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type FilterableChild with the internal array (3, 4, 5)</span>
</span><span class='line'><span class="x">// as it as skipped the first n*2 elements as defined in the child class</span>
</span><span class='line'><span class="x">$filterable-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// But we can also chain them&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;// Returns an object of type Filterable with the internal array of (2, 3, 4),</span>
</span><span class='line'><span class="x">// not (3, 4) as would be expected.</span>
</span><span class='line'><span class="x">$filterable-&gt;limit(4)-&gt;skip(1);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Uh oh, but that's not what we wanted. We started off with a FilterableChild
object so we'd like to call the FilterableChild object's skip method, but we are
calling the parent's skip method here because limit() returned an object of type
Filterable, not FilterableChild, so when skip() is called, the parent object's
method is called rather than the child's.</p>

<p>But how to solve this? We surely do not want to update the parent to have
knowledge of the child, that breaks some of the Object Oriented nature of the
code.</p>

<p>In an ideal world we would do some kind of object introspection so the parent
class would return an object of whatever type was passed to it, but PHP doesn't
really have true introspection so this will not work either!</p>

<p>We could use the factory pattern, but then we'd be creating a bunch of
extraneous classes.</p>

<h2><a id="inheritance-solutions"></a> The Solutions</h2>

<p>I actually came up with 2 solutions to this problem, one before and another
while writing this article.</p>

<h3>First solution: Messy introspection</h3>

<p>We could use something like the following for each of our parent methods:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    $myClass = get_class($this);</span>
</span><span class='line'><span class="x">    return new $myClass(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This uses some kind of messy PHP introspection. There is no true object
introspection in PHP, so the best we can do is use the get_class() method which
returns a string which is the name of the class and then use that class to
return an object of the type of $this.</p>

<p>This would obviously work for the parent, but the magic is that it also works
for the child as even if the child does not implement a method (thereby falling
back to the parent's implementation) the parent will return an object of the
child's type. In other words, since $this for a child object would be
FilterableChild, even if the parent's skip() method is called, get_class($this);
would return "FilterableChild" so the parent, which has no knowledge of the
child is able to return an object of that child's class.</p>

<p>This could also be refactored to its own member function and called from within
any member methods to be a bit cleaner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the Child Class  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;construct_instance_of(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    $class = get_class($this);</span>
</span><span class='line'><span class="x">    return new $class($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is appealing because the child class doesn't need to do any additional work
and it will work.</p>

<h3>Second Solution: Implement construct_instance_of() in child</h3>

<p>This solution is perhaps a bit cleaner because it doesn't deal with the ugliness
of getting the class name as a string and deaing with it, but requires any child
objects to override the construct_instance_of() method to return an object of
its type. Below I've got code for the parent and child object to make this work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Parent  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Filterable {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Skip the first N items</span>
</span><span class='line'><span class="x"> *</span>
</span><span class='line'><span class="x"> * @param $n</span>
</span><span class='line'><span class="x"> *   The number of items to skip</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function skip($n) {</span>
</span><span class='line'><span class="x">    return $this-&amp;gt;construct_instance_of(array_slice($this-&amp;gt;get(), $n));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    return new Filterable($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Child  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class FilterableChild {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'>
</span><span class='line'><span class="x">/**</span>
</span><span class='line'><span class="x"> * Construct an instance matching the original class</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">function construct_instance_of($i) {</span>
</span><span class='line'><span class="x">    return new FilterableChild($i);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">...</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since an object is created with its class, if we are always using
construct_instance_of() to return the object and it's implemented in all
children, the returned object will always have the child class even if the
method is called from the parent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9]]></title>
    <link href="http://victorquinn.com/blog/2012/12/23/cloud9/"/>
    <updated>2012-12-23T15:19:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/12/23/cloud9</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/cloud9.png"></p>

<p>I have been following <a href="http://c9.io">Cloud9</a> since their early
days. I was thrilled at their open source editor, <a href="http://ace.ajax.org">Ace</a>
(formerly Bespin) and actually wrote a
<a href="http://drupal.org/node/1377948">Drupal WYSIWYG plugin</a> to allow it as an option
for HTML editing in Drupal.</p>

<p>But, when I originally looked at Cloud9, as neat as it was to be able to edit
files in the cloud, it wasn't really too useful for much.</p>

<p>Just recently a co-worker sent me a link to some code he had written using it
with some client-side javascript code. It was nothing short of magical.</p>

<p>This. Changes. Everything.</p>

<p>Wondering what it'll be like to develop in the future? Just try out Cloud9.</p>

<h2>Direct git Integration</h2>

<p>Cloud9 can pair with your <a href="http://github.com">Github</a> or
<a href="http://bitbucket.com">Bitbucket</a> account and pull in all the code in any of your
repositories. So with just the click of a button you're up and running with your
code. That's pretty awesome.</p>

<p>But they actually had this awhile back when I tried it (though it now is even
more fluid and awesome). What has changed?</p>

<h2>The old problem</h2>

<p>Code editing in the cloud was neat and all, but I had to commit any changes I
made so I could check them out locally or on my webserver so I could test it and
see if it blew everything up or fixed the problem I was trying to solve.</p>

<p>This led to a tortured workflow involving committing sometimes not working code
in Cloud9, checking it out locally, running it, seeing if it worked or broke,
editing and bugfixing it locally, committing that, then going back to work in
Cloud9. As I'm sure you can imagine, Cloud9 quickly dropped out of my workflow
and I went back to just editing everything locally.</p>

<h2>The solution arrives!</h2>

<p>Imagine my surprise and wonder upon most recently checking out Cloud9 when it
had the ability to run code, in your browser! It can easily handle node.js,
rails, I'm sure more. It even handled this Jekyll-based blog with ease! In fact
I am editing this now, in Cloud9!</p>

<p>It has GUI shortcuts for things like git commands, npm install/uninstall, and
more, but it also allows you to drop directly into a terminal and run commands
there! It's just like having your own server with none of the headache.</p>

<h2>Always in sync across systems</h2>

<p>One of my favorite benefits of this approach is that everything is, by its
nature always in sync across systems. I can pick up my laptop, do some work,
then move to my desktop, open Cloud9 and everything is just as I left it. I
could go sit down in a random computer lab or library and still be in sync and
ready to roll.</p>

<p>This last bit, in my opinion, is the most powerful feature of this kind
of Cloud programming. For $0, I can have an always in sync IDE operable from any
browser, my own cloud server, and more. It took awhile for the gravity of this
to sink in, but this is pretty amazing. The barrier to entry for programming
with a server has never been lower</p>

<h2>Conclusion</h2>

<p>There's a lot more to discuss that I'm not touching on here, just wanted to hit
some of the quick highlights. I'm trying to work this into my workflow more so
I'm sure I'll have more thoughts later.</p>

<p>This is seriously awesome and feels like the future...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Scales]]></title>
    <link href="http://victorquinn.com/blog/2012/11/25/launching-scales/"/>
    <updated>2012-11-25T18:31:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/11/25/launching-scales</id>
    <content type="html"><![CDATA[<p>Today I officially announce the initial launch of the new website for my startup called <a href="http://scalesapp.com">Scales</a>.</p>

<p><img class="center" src="/images/scales-icon.png" width="256" height="256"></p>

<p>Named for the implement held in one hand by <a href="http://en.wikipedia.org/wiki/Lady_Justice">Lady Justice</a>, Scales will focus on creating innovative learning solutions for law students.</p>

<p>More info is available on the <a href="http://scalesapp.com">Scales</a> site, but in brief my goal is to meld my knowledge of the law with my skills as a software architect and build something unlike anything else that currently exists. Scales will offer a fresh new take on legal supplements, bringing them into the 21st century.</p>

<p>For the tech nerds out there, Scales is a <a href="http://rubyonrails.org">Ruby on Rails</a> application which will serve as the central repository for info, study materials, quiz questions, and other learning content. I will then build out a web experience directly in Rails using <a href="http://backbonejs.org">Backbone.js</a> to ensure it's snappy along with an iOS app which will communicate to that main web app via an API. Content and progress created in the Rails app will by seamlessly synchronized to the iOS app and vice versa with some intelligent caching so lack of connectivity will never be blocking.</p>

<p>With my rich background in software development building APIs, my plan is to be able to offer a top notch, fully integrated experience for legal education unlike any other currently out there which is also open for future expansion to Android devices or desktop applications or whatever else the future may have in store. (Direct mindlink anybody?)</p>

<p>I am flying solo on this project so progress may seem somewhat slow at the start, but will always be steady and I hope to have a true initial launch with content for a core set of courses sometime in Spring 2013. Please stay tuned for updates and if you are interested please do not hesitate to <a href="mailto:mail@victorquinn.com?subject=Scales">contact me</a>.</p>

<p>In the meantime any posts relating to Scales will be tagged appropriately and can all be viewed <a href="http://victorquinn.com/blog/categories/scales/">on this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Civic Drupal Module]]></title>
    <link href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"/>
    <updated>2012-10-26T16:28:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module</id>
    <content type="html"><![CDATA[<p>One of the nice things about working for a political company is the ability to work in a fast-moving field, especially close to election time.</p>

<p>Just a few weeks ago Google came out with a new API called <a href="https://developers.google.com/civic-information/">Civic</a> which allows you to pass in an address and get back a bunch of information related to voting in the upcoming election. It will return things such as polling places, candidates, and other election information.</p>

<p><img class="center" src="/images/google.png"></p>

<p>Our company took this to task and created a Drupal module which interacts with this new API service so people can easily add a "Find my polling place" widget to their Drupal website. This should hopefully get more people informed about the election and getting out to vote.</p>

<p>For my part, I took the Drupal 6 version created by my co-workers and ported it to Drupal 7. I also added (Drupal 7 only for now) some other cool info based on your address such as information on the relevant contests and links to the candidate pages so voters can be well informed going into election day.</p>

<p>Check it out!</p>

<p><a href="http://d7demo.ngpvanhost.com">Try out a demo</a></p>

<p><a href="http://drupal.org/project/google_civic">Module page on drupal.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git commit partial]]></title>
    <link href="http://victorquinn.com/blog/2012/10/18/git-commit-partial/"/>
    <updated>2012-10-18T10:38:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/18/git-commit-partial</id>
    <content type="html"><![CDATA[<p>One of my favorite git tricks is the ability to commit only part of a file. This is a short but sweet tip.</p>

<p>Just use:</p>

<p><code>bash
git add -p filename.rb
</code></p>

<p>This will ask you whether or not to stage each hunk of the file so you can commit that awesome change you made at the top, not stage the middle piece which is still a work in progress, and stage the piece at the bottom your team member needs to keep making progress.</p>
]]></content>
  </entry>
  
</feed>
