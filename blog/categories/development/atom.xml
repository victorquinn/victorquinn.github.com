<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Victor Quinn]]></title>
  <link href="http://victorquinn.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://victorquinn.com/"/>
  <updated>2012-12-23T16:11:42-05:00</updated>
  <id>http://victorquinn.com/</id>
  <author>
    <name><![CDATA[Victor Quinn]]></name>
    <email><![CDATA[inquiries@victorquinn.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launching Scales]]></title>
    <link href="http://victorquinn.com/blog/2012/11/25/launching-scales/"/>
    <updated>2012-11-25T18:31:00-05:00</updated>
    <id>http://victorquinn.com/blog/2012/11/25/launching-scales</id>
    <content type="html"><![CDATA[<p>Today I officially announce the initial launch of the new website for my startup called <a href="http://scalesapp.com">Scales</a>.</p>

<p><img class="center" src="/images/scales-icon.png" width="256" height="256"></p>

<p>Named for the implement held in one hand by <a href="http://en.wikipedia.org/wiki/Lady_Justice">Lady Justice</a>, Scales will focus on creating innovative learning solutions for law students.</p>

<p>More info is available on the <a href="http://scalesapp.com">Scales</a> site, but in brief my goal is to meld my knowledge of the law with my skills as a software architect and build something unlike anything else that currently exists. Scales will offer a fresh new take on legal supplements, bringing them into the 21st century.</p>

<p>For the tech nerds out there, Scales is a <a href="http://rubyonrails.org">Ruby on Rails</a> application which will serve as the central repository for info, study materials, quiz questions, and other learning content. I will then build out a web experience directly in Rails using <a href="http://backbonejs.org">Backbone.js</a> to ensure it's snappy along with an iOS app which will communicate to that main web app via an API. Content and progress created in the Rails app will by seamlessly synchronized to the iOS app and vice versa with some intelligent caching so lack of connectivity will never be blocking.</p>

<p>With my rich background in software development building APIs, my plan is to be able to offer a top notch, fully integrated experience for legal education unlike any other currently out there which is also open for future expansion to Android devices or desktop applications or whatever else the future may have in store. (Direct mindlink anybody?)</p>

<p>I am flying solo on this project so progress may seem somewhat slow at the start, but will always be steady and I hope to have a true initial launch with content for a core set of courses sometime in Spring 2013. Please stay tuned for updates and if you are interested please do not hesitate to <a href="mailto:mail@victorquinn.com?subject=Scales">contact me</a>.</p>

<p>In the meantime any posts relating to Scales will be tagged appropriately and can all be viewed <a href="http://victorquinn.com/blog/categories/scales/">on this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Civic Drupal Module]]></title>
    <link href="http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module/"/>
    <updated>2012-10-26T16:28:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/26/google-civic-drupal-module</id>
    <content type="html"><![CDATA[<p>One of the nice things about working for a political company is the ability to work in a fast-moving field, especially close to election time.</p>

<p>Just a few weeks ago Google came out with a new API called <a href="https://developers.google.com/civic-information/">Civic</a> which allows you to pass in an address and get back a bunch of information related to voting in the upcoming election. It will return things such as polling places, candidates, and other election information.</p>

<p><img class="center" src="/images/google.png"></p>

<p>Our company took this to task and created a Drupal module which interacts with this new API service so people can easily add a "Find my polling place" widget to their Drupal website. This should hopefully get more people informed about the election and getting out to vote.</p>

<p>For my part, I took the Drupal 6 version created by my co-workers and ported it to Drupal 7. I also added (Drupal 7 only for now) some other cool info based on your address such as information on the relevant contests and links to the candidate pages so voters can be well informed going into election day.</p>

<p>Check it out!</p>

<p><a href="http://d7demo.ngpvanhost.com">Try out a demo</a></p>

<p><a href="http://drupal.org/project/google_civic">Module page on drupal.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git commit partial]]></title>
    <link href="http://victorquinn.com/blog/2012/10/18/git-commit-partial/"/>
    <updated>2012-10-18T10:38:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/10/18/git-commit-partial</id>
    <content type="html"><![CDATA[<p>One of my favorite git tricks is the ability to commit only part of a file. This is a short but sweet tip.</p>

<p>Just use:</p>

<p><code>bash
git add -p filename.rb
</code></p>

<p>This will ask you whether or not to stage each hunk of the file so you can commit that awesome change you made at the top, not stage the middle piece which is still a work in progress, and stage the piece at the bottom your team member needs to keep making progress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating Fielded Nodes in Drupal 7]]></title>
    <link href="http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes/"/>
    <updated>2012-08-11T18:23:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/08/11/programmatically-creating-fielded-d7-nodes</id>
    <content type="html"><![CDATA[<h3>The Setup</h3>

<p>You've just created your new super awesome node type in Drupal 7 using the (now in core!) Content type editor.</p>

<p><img class="center" src="/images/contenttype1.png"></p>

<p>Now you want to programmatically generate some Super Awesome Content nodes. Some <a href="https://www.google.com">Googling</a> (or <a href="https://duckduckgo.com">Ducking</a>!) will land you with some snippets that look as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Works with standard node  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;blog&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Problem</h3>

<p>Since you've defined a custom content type, you may think something like the following would work great with your new custom node type to set your custom field values:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Attempt with custom node (this will fail!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field values</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, that will fail! Why? Because you can't set node custom fields like you may expect with <em>$node->{$key}</em>.</p>

<p><em>In my opinion, this is one thing Drupal 7 got very wrong. I'll explain their rationale in a bit after showing the correct way to do this and it does make some sense, but it seems unnecessarily complicated.</em></p>

<h3>The Solution</h3>

<p>Instead of trying to set those custom field attributes directly, you have to use the following funky syntax:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Successful attempt with custom node (this totally works!)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">function create_my_node() {</span>
</span><span class='line'><span class="x">  $node = new stdClass();</span>
</span><span class='line'><span class="x">  $node-&gt;type = &#39;super_awesome_content&#39;;</span>
</span><span class='line'><span class="x">  node_object_prepare($node);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  $node-&gt;title = &quot;My Awesome Title&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;language = LANGUAGE_NONE;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Try to set your custom field</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Huh? What's with this <em>['und'][0]['value']</em> stuff?</p>

<p>Well, it's a bit complicated. Let's break it down piece by piece</p>

<h4>['und']</h4>

<p>This first bit is the language to be applied to the field. <em>'und'</em> is the key specifying that the language is undefined. This could also be 'en' or 'de' or 'fr' or any other 2 letter language code if a particular language is specified for this field.</p>

<h4>[0]</h4>

<p>This is an array index. For any single value fields like the ones we have, this is just [0]. But it's conceivable to have multiple values in which this would kind of make sense. For example, let's say our reasons_for_being_awesome field was a multi-value field:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Multi-value field  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  ...</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][1][&#39;value&#39;] = &quot;Reason number 2&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][2][&#39;value&#39;] = &quot;Another reason&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][3][&#39;value&#39;] = &quot;The most important reason&quot;;</span>
</span><span class='line'><span class="x">  node_save($node);</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it makes some sense for the array index to be there, but it's somewhat confusing for what is arguably the main use case -- namely trying to assign a single value to a field.</p>

<h4>['value']</h4>

<p>This may be the oddest piece. There are a few other keys which could be specified here, among them <em>['format']</em> and <em>['summary']</em>, but when working programmatically with custom fields, it's rare to be setting anything other than <em>['value']</em>.</p>

<h3>Summary</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Summary  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">  // Won&#39;t work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points = 23;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  // Will work</span>
</span><span class='line'><span class="x">  $node-&gt;field_reasons_for_being_awesome[&#39;und&#39;][0][&#39;value&#39;] = &quot;Too many to count...&quot;;</span>
</span><span class='line'><span class="x">  $node-&gt;field_awesome_points[&#39;und&#39;][0][&#39;value&#39;] = 23;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Commentary</h3>

<p>I think Drupal should be much better here and dropped the ball for developers by not allowing the first method above to work. This ['und'][0]['value'] mess may make it easier for the system to deal with the input, but it makes things far more difficult/complicated for developers. This is an area where it's painfully clear that the Drupal Field API is not a true ORM like <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> and in my opinion that's a missed opportunity.</p>

<p>Ideally the system would be able to default to allowing things to be set with just the key and not require developers to specify the language, array index, and value key every single time a value is set to the field.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyNation 2012]]></title>
    <link href="http://victorquinn.com/blog/2012/03/22/rubynation-2012/"/>
    <updated>2012-03-22T23:05:00-04:00</updated>
    <id>http://victorquinn.com/blog/2012/03/22/rubynation-2012</id>
    <content type="html"><![CDATA[<p>I'll be at RubyNation 2012 tomorrow.</p>

<p>Getting my laptop set up and ready to roll so I'll be ready to code like a madman.</p>

<p>I love <a href="http://victorquinn.com/blog/2012/03/15/attending-rubynation-2012/">conferences</a> ;)</p>

<p>If you'll be there, find me or <a href="https://twitter.com/intent/tweet?screen_name=victorquinn" class="twitter-mention-button" data-lang="en">Tweet to @victorquinn</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

]]></content>
  </entry>
  
</feed>
